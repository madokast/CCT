package cn.edu.hust.zrx.cct.study.廖益诚机架;

import cn.edu.hust.zrx.cct.Logger;
import cn.edu.hust.zrx.cct.advanced.*;
import cn.edu.hust.zrx.cct.base.BaseUtils;
import cn.edu.hust.zrx.cct.base.annotation.Run;
import cn.edu.hust.zrx.cct.base.cct.Cct;
import cn.edu.hust.zrx.cct.base.cct.CctFactory;
import cn.edu.hust.zrx.cct.base.cct.Elements;
import cn.edu.hust.zrx.cct.base.cct.MagnetAble;
import cn.edu.hust.zrx.cct.base.line.Arcs;
import cn.edu.hust.zrx.cct.base.line.Line2;
import cn.edu.hust.zrx.cct.base.line.Trajectory;
import cn.edu.hust.zrx.cct.base.line.TrajectoryFactory;
import cn.edu.hust.zrx.cct.base.opticsMagnet.qs.QsHardPlaneMagnet;
import cn.edu.hust.zrx.cct.base.particle.*;
import cn.edu.hust.zrx.cct.base.point.Point2;
import cn.edu.hust.zrx.cct.base.point.Point3;
import cn.edu.hust.zrx.cct.base.python.Plot2d;
import cn.edu.hust.zrx.cct.base.python.Plot3d;
import cn.edu.hust.zrx.cct.base.vector.Vector2;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static cn.edu.hust.zrx.cct.base.BaseUtils.Constant.*;

/**
 * Description
 * 2020年9月3日
 * A0903前偏转段建模
 * <p>
 * Data
 * 18:28
 *
 * @author zrx
 * @version 1.0
 */

@SuppressWarnings("all")
public class A0906廖益诚机架后偏转段建模 {

    enum COSY_MAP {
        part1Optics, part1beforeFirstQS1, part2Optics;

        CosyArbitraryOrder.CosyMapArbitraryOrder map;

        static {
            part2Optics.map = CosyArbitraryOrder.readMap(
                    "  0.9440670     0.6458638     0.0000000E+00 0.0000000E+00 0.6868218E-02 100000\n" +
                            " -0.1683598     0.9440670     0.0000000E+00 0.0000000E+00-0.5948003E-03 010000\n" +
                            "  0.0000000E+00 0.0000000E+00-0.8838267    -0.2774970     0.0000000E+00 001000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.7886585    -0.8838267     0.0000000E+00 000100\n" +
                            "  0.0000000E+00 0.0000000E+00 0.0000000E+00 0.0000000E+00  1.000000     000010\n" +
                            "  0.5948003E-03-0.6868218E-02 0.0000000E+00 0.0000000E+00  1.141010     000001\n" +
                            " -0.8418508    -0.2694933     0.0000000E+00 0.0000000E+00-0.4005467     200000\n" +
                            "  -2.533358     0.4667723E-01 0.0000000E+00 0.0000000E+00-0.7508791     110000\n" +
                            "  0.1096967      1.337564     0.0000000E+00 0.0000000E+00 -1.187736     020000\n" +
                            "  0.0000000E+00 0.0000000E+00 -5.477526    -0.5575892E-01 0.0000000E+00 101000\n" +
                            "  0.0000000E+00 0.0000000E+00 -18.81124     0.4828824E-02 0.0000000E+00 011000\n" +
                            "   2.589864     0.9928759     0.0000000E+00 0.0000000E+00-0.3461818     002000\n" +
                            "  0.0000000E+00 0.0000000E+00  4.621639      6.978347     0.0000000E+00 100100\n" +
                            "  0.0000000E+00 0.0000000E+00-0.4002424      18.68127     0.0000000E+00 010100\n" +
                            "   16.51481      6.123674     0.0000000E+00 0.0000000E+00-0.3328664E-01 001100\n" +
                            " -0.8253509     0.2713202     0.0000000E+00 0.0000000E+00 0.2522695     100001\n" +
                            "  -2.369022    -0.8437520     0.0000000E+00 0.0000000E+00-0.2184700E-01 010001\n" +
                            "  0.0000000E+00 0.0000000E+00 0.7079158    -0.6026925     0.0000000E+00 001001\n" +
                            "  -7.594694    -0.1175846     0.0000000E+00 0.0000000E+00 -1.328547     000200\n" +
                            "  0.0000000E+00 0.0000000E+00  2.374662     0.5754581     0.0000000E+00 000101\n" +
                            "  0.1930444E-01-0.1233179     0.0000000E+00 0.0000000E+00 -1.135144     000002\n" +
                            "   7.582722    -0.5510793E-01 0.0000000E+00 0.0000000E+00-0.6233332     300000\n" +
                            "   21.23337     -6.662728     0.0000000E+00 0.0000000E+00 -3.908303     210000\n" +
                            "  -4.263338     -20.63899     0.0000000E+00 0.0000000E+00 -7.912476     120000\n" +
                            "  -4.060999      2.266220     0.0000000E+00 0.0000000E+00-0.9817780     030000\n" +
                            "  0.0000000E+00 0.0000000E+00 -22.96466     -10.85428     0.0000000E+00 201000\n" +
                            "  0.0000000E+00 0.0000000E+00 -153.1827     -67.03043     0.0000000E+00 111000\n" +
                            "  0.0000000E+00 0.0000000E+00 -236.6263     -100.9243     0.0000000E+00 021000\n" +
                            "  -10.46955     -3.458884     0.0000000E+00 0.0000000E+00 -4.523058     102000\n" +
                            "  -30.49821     -8.639273     0.0000000E+00 0.0000000E+00 -11.18092     012000\n" +
                            "  0.0000000E+00 0.0000000E+00 -7.946371      1.053984     0.0000000E+00 003000\n" +
                            "  0.0000000E+00 0.0000000E+00 -50.71794     -26.23065     0.0000000E+00 200100\n" +
                            "  0.0000000E+00 0.0000000E+00 -303.4597     -146.6364     0.0000000E+00 110100\n" +
                            "  0.0000000E+00 0.0000000E+00 -447.2059     -211.3341     0.0000000E+00 020100\n" +
                            "   41.48564      8.956382     0.0000000E+00 0.0000000E+00 -12.58125     101100\n" +
                            "   184.6846      52.60613     0.0000000E+00 0.0000000E+00 -21.61385     011100\n" +
                            "  0.0000000E+00 0.0000000E+00 -42.09093      6.585558     0.0000000E+00 002100\n" +
                            "  -4.929099    -0.2708607     0.0000000E+00 0.0000000E+00  1.074372     200001\n" +
                            "  -12.04717     0.8734435     0.0000000E+00 0.0000000E+00  3.833005     110001\n" +
                            "   2.156135      7.431021     0.0000000E+00 0.0000000E+00  6.406043     020001\n" +
                            "  0.0000000E+00 0.0000000E+00  11.75894     0.8484979     0.0000000E+00 101001\n" +
                            "  0.0000000E+00 0.0000000E+00  39.31607     0.7301376     0.0000000E+00 011001\n" +
                            "  0.1604897      1.283820     0.0000000E+00 0.0000000E+00  2.034454     002001\n" +
                            "   150.1079      37.42510     0.0000000E+00 0.0000000E+00  6.400781     100200\n" +
                            "   589.5744      152.1512     0.0000000E+00 0.0000000E+00  37.12263     010200\n" +
                            "  0.0000000E+00 0.0000000E+00 0.9078687      52.87392     0.0000000E+00 001200\n" +
                            "  0.0000000E+00 0.0000000E+00  11.66972     -3.527720     0.0000000E+00 100101\n" +
                            "  0.0000000E+00 0.0000000E+00 -3.559704     -38.65603     0.0000000E+00 010101\n" +
                            "  -48.09583     -7.887847     0.0000000E+00 0.0000000E+00  5.718562     001101\n" +
                            "   1.733393    -0.2191445     0.0000000E+00 0.0000000E+00-0.5517788     100002\n" +
                            "   6.450044      1.299856     0.0000000E+00 0.0000000E+00-0.1337775     010002\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.027244      1.211147     0.0000000E+00 001002\n" +
                            "  0.0000000E+00 0.0000000E+00 -91.47981     -11.13600     0.0000000E+00 000300\n" +
                            "  -12.40171     0.5871297     0.0000000E+00 0.0000000E+00  15.22943     000201\n" +
                            "  0.0000000E+00 0.0000000E+00 -16.60740     -3.187518     0.0000000E+00 000102\n" +
                            "  0.1170466     0.2108807     0.0000000E+00 0.0000000E+00  1.119626     000003\n" +
                            "   5.733148     0.5183922     0.0000000E+00 0.0000000E+00 -1.920695     400000\n" +
                            "   89.31363      13.11336     0.0000000E+00 0.0000000E+00 -4.430889     310000\n" +
                            "   325.6501      27.09931     0.0000000E+00 0.0000000E+00 -1.124896     220000\n" +
                            "   351.6752     -33.04566     0.0000000E+00 0.0000000E+00 -18.72913     130000\n" +
                            "  -27.01230     -98.69394     0.0000000E+00 0.0000000E+00 -37.21894     040000\n" +
                            "  0.0000000E+00 0.0000000E+00  24.59737      9.233624     0.0000000E+00 301000\n" +
                            "  0.0000000E+00 0.0000000E+00  28.13374      27.25673     0.0000000E+00 211000\n" +
                            "  0.0000000E+00 0.0000000E+00 -330.7300     -47.66518     0.0000000E+00 121000\n" +
                            "  0.0000000E+00 0.0000000E+00 -611.6665     -139.0466     0.0000000E+00 031000\n" +
                            "  -20.88857     -10.17089     0.0000000E+00 0.0000000E+00 -6.881394     202000\n" +
                            "  -339.4092     -122.0637     0.0000000E+00 0.0000000E+00 -58.15648     112000\n" +
                            "  -827.5660     -286.8721     0.0000000E+00 0.0000000E+00 -117.4066     022000\n" +
                            "  0.0000000E+00 0.0000000E+00 -94.03257     -17.85398     0.0000000E+00 103000\n" +
                            "  0.0000000E+00 0.0000000E+00 -241.6061     -48.66945     0.0000000E+00 013000\n" +
                            "  -12.54363     -5.613237     0.0000000E+00 0.0000000E+00 -7.611090     004000\n" +
                            "  0.0000000E+00 0.0000000E+00 -28.26318     -6.907042     0.0000000E+00 300100\n" +
                            "  0.0000000E+00 0.0000000E+00 -322.2647     -54.70999     0.0000000E+00 210100\n" +
                            "  0.0000000E+00 0.0000000E+00 -939.9735     -126.3953     0.0000000E+00 120100\n" +
                            "  0.0000000E+00 0.0000000E+00 -560.7179      12.91139     0.0000000E+00 030100\n" +
                            "  -93.90657     -46.14862     0.0000000E+00 0.0000000E+00 -64.59081     201100\n" +
                            "  -1456.647     -503.0800     0.0000000E+00 0.0000000E+00 -455.6097     111100\n" +
                            "  -3668.826     -1182.637     0.0000000E+00 0.0000000E+00 -807.7518     021100\n" +
                            "  0.0000000E+00 0.0000000E+00 -785.2023     -221.4025     0.0000000E+00 102100\n" +
                            "  0.0000000E+00 0.0000000E+00 -2187.148     -680.3864     0.0000000E+00 012100\n" +
                            "   88.16765      5.469851     0.0000000E+00 0.0000000E+00 -51.74484     003100\n" +
                            "  -4.331769      1.280492     0.0000000E+00 0.0000000E+00  3.030408     300001\n" +
                            "  -68.65290     -3.257074     0.0000000E+00 0.0000000E+00  11.64562     210001\n" +
                            "  -148.1773      10.21502     0.0000000E+00 0.0000000E+00  20.18008     120001\n" +
                            "  -132.9920    -0.5791341     0.0000000E+00 0.0000000E+00  6.666550     030001\n" +
                            "  0.0000000E+00 0.0000000E+00  42.07979      14.41459     0.0000000E+00 201001\n" +
                            "  0.0000000E+00 0.0000000E+00  418.3281      141.9324     0.0000000E+00 111001\n" +
                            "  0.0000000E+00 0.0000000E+00  883.5959      302.0580     0.0000000E+00 021001\n" +
                            "   49.57911      15.03970     0.0000000E+00 0.0000000E+00  12.39058     102001\n" +
                            "   198.6333      51.58139     0.0000000E+00 0.0000000E+00  36.43851     012001\n" +
                            "  0.0000000E+00 0.0000000E+00  19.26976     -7.103978     0.0000000E+00 003001\n" +
                            "  -228.4975     -96.21404     0.0000000E+00 0.0000000E+00 -168.9198     200200\n" +
                            "  -2332.662     -773.4234     0.0000000E+00 0.0000000E+00 -996.1223     110200\n" +
                            "  -5022.640     -1427.996     0.0000000E+00 0.0000000E+00 -1536.143     020200\n" +
                            "  0.0000000E+00 0.0000000E+00 -1201.529     -263.4647     0.0000000E+00 101200\n" +
                            "  0.0000000E+00 0.0000000E+00 -3216.268     -800.8999     0.0000000E+00 011200\n" +
                            "   718.2521      136.7016     0.0000000E+00 0.0000000E+00 -125.8829     002200\n" +
                            "  0.0000000E+00 0.0000000E+00  213.4070      81.68385     0.0000000E+00 200101\n" +
                            "  0.0000000E+00 0.0000000E+00  1425.881      528.5887     0.0000000E+00 110101\n" +
                            "  0.0000000E+00 0.0000000E+00  2605.563      961.9297     0.0000000E+00 020101\n" +
                            "  -128.0423     -27.64338     0.0000000E+00 0.0000000E+00  34.68526     101101\n" +
                            "  -429.5629     -147.0794     0.0000000E+00 0.0000000E+00  48.90665     011101\n" +
                            "  0.0000000E+00 0.0000000E+00  254.6712      9.801742     0.0000000E+00 002101\n" +
                            "   1.343773     -1.527359     0.0000000E+00 0.0000000E+00 -2.493435     200002\n" +
                            "   22.36851      2.148316     0.0000000E+00 0.0000000E+00 -7.867413     110002\n" +
                            "   5.258362     -7.719461     0.0000000E+00 0.0000000E+00 -13.59049     020002\n" +
                            "  0.0000000E+00 0.0000000E+00-0.6249903      4.998688     0.0000000E+00 101002\n" +
                            "  0.0000000E+00 0.0000000E+00 -29.37796      9.955867     0.0000000E+00 011002\n" +
                            "  -14.67948     -6.114577     0.0000000E+00 0.0000000E+00 -5.148348     002002\n" +
                            "  0.0000000E+00 0.0000000E+00  416.8220      403.6948     0.0000000E+00 100300\n" +
                            "  0.0000000E+00 0.0000000E+00  2947.644      1944.738     0.0000000E+00 010300\n" +
                            "   1982.065      529.4564     0.0000000E+00 0.0000000E+00 -43.67755     001300\n" +
                            "  -747.6126     -191.3839     0.0000000E+00 0.0000000E+00 -44.95854     100201\n" +
                            "  -2560.727     -693.9214     0.0000000E+00 0.0000000E+00 -266.3164     010201\n" +
                            "  0.0000000E+00 0.0000000E+00  183.0090     -154.7622     0.0000000E+00 001201\n" +
                            "  0.0000000E+00 0.0000000E+00 -28.69322      1.927292     0.0000000E+00 100102\n" +
                            "  0.0000000E+00 0.0000000E+00  43.39021      71.13394     0.0000000E+00 010102\n" +
                            "   98.56070      12.67665     0.0000000E+00 0.0000000E+00 -9.573017     001102\n" +
                            " -0.1826408      1.187304     0.0000000E+00 0.0000000E+00  1.105103     100003\n" +
                            "  -9.401290     -1.371561     0.0000000E+00 0.0000000E+00 0.3820244     010003\n" +
                            "  0.0000000E+00 0.0000000E+00 -6.705529     -4.914408     0.0000000E+00 001003\n" +
                            "   816.6995      133.1433     0.0000000E+00 0.0000000E+00 -128.4444     000400\n" +
                            "  0.0000000E+00 0.0000000E+00  630.6257      88.24827     0.0000000E+00 000301\n" +
                            "   154.2046      30.22726     0.0000000E+00 0.0000000E+00 -32.48889     000202\n" +
                            "  0.0000000E+00 0.0000000E+00  24.88709      1.103792     0.0000000E+00 000103\n" +
                            " -0.5625978    -0.4032071     0.0000000E+00 0.0000000E+00 -1.191595     000004\n" +
                            "   40.13092      16.01285     0.0000000E+00 0.0000000E+00-0.7341856     500000\n" +
                            "   326.8608      131.2064     0.0000000E+00 0.0000000E+00 -12.77913     410000\n" +
                            "   1118.849      353.5354     0.0000000E+00 0.0000000E+00 -66.36570     320000\n" +
                            "   2511.468      466.9168     0.0000000E+00 0.0000000E+00 -109.2605     230000\n" +
                            "   3622.174      492.7279     0.0000000E+00 0.0000000E+00 -20.50849     140000\n" +
                            "   2240.436      436.3684     0.0000000E+00 0.0000000E+00  54.43742     050000\n" +
                            "  0.0000000E+00 0.0000000E+00  204.9360      63.36981     0.0000000E+00 401000\n" +
                            "  0.0000000E+00 0.0000000E+00  1592.882      470.6215     0.0000000E+00 311000\n" +
                            "  0.0000000E+00 0.0000000E+00  3551.219      932.9344     0.0000000E+00 221000\n" +
                            "  0.0000000E+00 0.0000000E+00  148.5735     -374.9564     0.0000000E+00 131000\n" +
                            "  0.0000000E+00 0.0000000E+00 -5248.747     -2006.358     0.0000000E+00 041000\n" +
                            "  -26.30683     -7.758980     0.0000000E+00 0.0000000E+00  12.81919     302000\n" +
                            "  -60.78226      1.526524     0.0000000E+00 0.0000000E+00  199.5653     212000\n" +
                            "  -19.53233     -8.023729     0.0000000E+00 0.0000000E+00  684.9276     122000\n" +
                            "   142.2117     -45.90775     0.0000000E+00 0.0000000E+00  674.0547     032000\n" +
                            "  0.0000000E+00 0.0000000E+00 -104.1283      6.298465     0.0000000E+00 203000\n" +
                            "  0.0000000E+00 0.0000000E+00 -442.8580      134.3332     0.0000000E+00 113000\n" +
                            "  0.0000000E+00 0.0000000E+00 -345.2669      390.2133     0.0000000E+00 023000\n" +
                            "  -260.6251     -78.85286     0.0000000E+00 0.0000000E+00 -46.36500     104000\n" +
                            "  -952.1188     -272.6314     0.0000000E+00 0.0000000E+00 -132.5657     014000\n" +
                            "  0.0000000E+00 0.0000000E+00 -54.52779      5.317212     0.0000000E+00 005000\n" +
                            "  0.0000000E+00 0.0000000E+00  289.5894      75.08090     0.0000000E+00 400100\n" +
                            "  0.0000000E+00 0.0000000E+00  1738.885      385.7481     0.0000000E+00 310100\n" +
                            "  0.0000000E+00 0.0000000E+00  1018.307     -298.6466     0.0000000E+00 220100\n" +
                            "  0.0000000E+00 0.0000000E+00 -9444.320     -3995.808     0.0000000E+00 130100\n" +
                            "  0.0000000E+00 0.0000000E+00 -15428.57     -5554.634     0.0000000E+00 040100\n" +
                            "  -48.57640      23.56792     0.0000000E+00 0.0000000E+00  214.1385     301100\n" +
                            "   2552.355      1136.617     0.0000000E+00 0.0000000E+00  2297.089     211100\n" +
                            "   11974.06      3999.002     0.0000000E+00 0.0000000E+00  7026.397     121100\n" +
                            "   13670.43      3298.521     0.0000000E+00 0.0000000E+00  6624.266     031100\n" +
                            "  0.0000000E+00 0.0000000E+00 -1995.318     -610.9785     0.0000000E+00 202100\n" +
                            "  0.0000000E+00 0.0000000E+00 -11733.04     -3583.699     0.0000000E+00 112100\n" +
                            "  0.0000000E+00 0.0000000E+00 -17085.34     -4990.702     0.0000000E+00 022100\n" +
                            "  -832.7784     -274.5690     0.0000000E+00 0.0000000E+00 -402.3308     103100\n" +
                            "  -4293.163     -1140.471     0.0000000E+00 0.0000000E+00 -1155.553     013100\n" +
                            "  0.0000000E+00 0.0000000E+00 -1045.575     -200.5406     0.0000000E+00 004100\n" +
                            "  -21.92104     -5.855090     0.0000000E+00 0.0000000E+00  5.200871     400001\n" +
                            "  -209.8210     -76.23299     0.0000000E+00 0.0000000E+00  19.77735     310001\n" +
                            "  -734.3006     -211.6518     0.0000000E+00 0.0000000E+00  7.448278     220001\n" +
                            "  -1196.563     -178.5001     0.0000000E+00 0.0000000E+00 -1.493925     130001\n" +
                            "  -444.6859      119.6855     0.0000000E+00 0.0000000E+00  80.67962     040001\n" +
                            "  0.0000000E+00 0.0000000E+00 -253.8376     -85.50154     0.0000000E+00 301001\n" +
                            "  0.0000000E+00 0.0000000E+00 -1554.562     -536.7129     0.0000000E+00 211001\n" +
                            "  0.0000000E+00 0.0000000E+00 -2385.744     -916.1166     0.0000000E+00 121001\n" +
                            "  0.0000000E+00 0.0000000E+00 -349.2640     -330.8550     0.0000000E+00 031001\n" +
                            "   311.2702      103.9397     0.0000000E+00 0.0000000E+00  35.29424     202001\n" +
                            "   2339.755      720.0290     0.0000000E+00 0.0000000E+00  241.5652     112001\n" +
                            "   4631.766      1451.516     0.0000000E+00 0.0000000E+00  506.7019     022001\n" +
                            "  0.0000000E+00 0.0000000E+00  71.46266     -52.31236     0.0000000E+00 103001\n" +
                            "  0.0000000E+00 0.0000000E+00  295.8900     -116.5102     0.0000000E+00 013001\n" +
                            "   150.3243      47.88270     0.0000000E+00 0.0000000E+00  31.50330     004001\n" +
                            "   727.0723      357.1347     0.0000000E+00 0.0000000E+00  501.8386     300200\n" +
                            "   10307.66      3982.488     0.0000000E+00 0.0000000E+00  4564.989     210200\n" +
                            "   33882.48      10852.56     0.0000000E+00 0.0000000E+00  12724.48     120200\n" +
                            "   30407.45      6728.492     0.0000000E+00 0.0000000E+00  11531.69     030200\n" +
                            "  0.0000000E+00 0.0000000E+00 -8975.223     -3429.403     0.0000000E+00 201200\n" +
                            "  0.0000000E+00 0.0000000E+00 -59722.63     -23641.77     0.0000000E+00 111200\n" +
                            "  0.0000000E+00 0.0000000E+00 -101562.0     -41246.83     0.0000000E+00 021200\n" +
                            "  -857.7638     -689.0649     0.0000000E+00 0.0000000E+00 -1663.354     102200\n" +
                            "  -11067.13     -3864.079     0.0000000E+00 0.0000000E+00 -5040.129     012200\n" +
                            "  0.0000000E+00 0.0000000E+00 -4033.120     -736.8266     0.0000000E+00 003200\n" +
                            "  0.0000000E+00 0.0000000E+00 -307.0050     -101.0804     0.0000000E+00 300101\n" +
                            "  0.0000000E+00 0.0000000E+00 -1547.731     -567.3104     0.0000000E+00 210101\n" +
                            "  0.0000000E+00 0.0000000E+00 -799.0138     -576.9199     0.0000000E+00 120101\n" +
                            "  0.0000000E+00 0.0000000E+00  754.7759     -278.4999     0.0000000E+00 030101\n" +
                            "   1915.336      605.5417     0.0000000E+00 0.0000000E+00  328.0026     201101\n" +
                            "   12483.25      3547.577     0.0000000E+00 0.0000000E+00  2147.488     111101\n" +
                            "   22878.38      6528.301     0.0000000E+00 0.0000000E+00  3993.667     021101\n" +
                            "  0.0000000E+00 0.0000000E+00  2880.103      725.8229     0.0000000E+00 102101\n" +
                            "  0.0000000E+00 0.0000000E+00  9381.309      2653.689     0.0000000E+00 012101\n" +
                            "   150.0333      120.5835     0.0000000E+00 0.0000000E+00  202.9633     003101\n" +
                            "  0.9223004     -6.064191     0.0000000E+00 0.0000000E+00 -7.994608     300002\n" +
                            "   73.71745     -2.909987     0.0000000E+00 0.0000000E+00 -34.31666     210002\n" +
                            "   167.2610     -26.05455     0.0000000E+00 0.0000000E+00 -54.25808     120002\n" +
                            "   237.2090     -1.654475     0.0000000E+00 0.0000000E+00 -8.174951     030002\n" +
                            "  0.0000000E+00 0.0000000E+00  39.06593      24.04380     0.0000000E+00 201002\n" +
                            "  0.0000000E+00 0.0000000E+00 -288.9111     -42.95741     0.0000000E+00 111002\n" +
                            "  0.0000000E+00 0.0000000E+00 -1356.206     -373.1249     0.0000000E+00 021002\n" +
                            "  -275.3555     -84.69920     0.0000000E+00 0.0000000E+00 -42.36411     102002\n" +
                            "  -978.4596     -270.3132     0.0000000E+00 0.0000000E+00 -136.7270     012002\n" +
                            "  0.0000000E+00 0.0000000E+00  53.50479      53.88121     0.0000000E+00 003002\n" +
                            "  0.0000000E+00 0.0000000E+00 -13380.08     -5441.656     0.0000000E+00 200300\n" +
                            "  0.0000000E+00 0.0000000E+00 -90141.16     -37981.31     0.0000000E+00 110300\n" +
                            "  0.0000000E+00 0.0000000E+00 -163411.5     -71229.63     0.0000000E+00 020300\n" +
                            "   4707.975      896.4763     0.0000000E+00 0.0000000E+00 -2447.529     101300\n" +
                            "  -1658.804     -1040.789     0.0000000E+00 0.0000000E+00 -6857.136     011300\n" +
                            "  0.0000000E+00 0.0000000E+00 -5529.702     -222.5052     0.0000000E+00 002300\n" +
                            "   2993.226      839.9694     0.0000000E+00 0.0000000E+00  805.6199     200201\n" +
                            "   17895.87      4521.859     0.0000000E+00 0.0000000E+00  4963.865     110201\n" +
                            "   29902.84      7210.479     0.0000000E+00 0.0000000E+00  8532.902     020201\n" +
                            "  0.0000000E+00 0.0000000E+00  5784.422      1325.389     0.0000000E+00 101201\n" +
                            "  0.0000000E+00 0.0000000E+00  18726.63      5178.437     0.0000000E+00 011201\n" +
                            "  -2362.462     -233.6411     0.0000000E+00 0.0000000E+00  574.8097     002201\n" +
                            "  0.0000000E+00 0.0000000E+00 -234.2711     -58.56705     0.0000000E+00 200102\n" +
                            "  0.0000000E+00 0.0000000E+00 -2271.428     -671.3758     0.0000000E+00 110102\n" +
                            "  0.0000000E+00 0.0000000E+00 -5992.821     -1913.322     0.0000000E+00 020102\n" +
                            "  -697.5191     -265.7962     0.0000000E+00 0.0000000E+00 -160.0456     101102\n" +
                            "  -1867.135     -526.3334     0.0000000E+00 0.0000000E+00 -362.1349     011102\n" +
                            "  0.0000000E+00 0.0000000E+00 -517.0575      19.53768     0.0000000E+00 002102\n" +
                            "   3.719726      5.415033     0.0000000E+00 0.0000000E+00  5.272270     200003\n" +
                            "  -30.27656    -0.9004405     0.0000000E+00 0.0000000E+00  16.21898     110003\n" +
                            "  -2.613934      10.95013     0.0000000E+00 0.0000000E+00  27.54866     020003\n" +
                            "  0.0000000E+00 0.0000000E+00 -53.46213     -26.94353     0.0000000E+00 101003\n" +
                            "  0.0000000E+00 0.0000000E+00 -67.36606     -51.63464     0.0000000E+00 011003\n" +
                            "   66.77891      21.54198     0.0000000E+00 0.0000000E+00  13.49977     002003\n" +
                            "   13233.78      4501.883     0.0000000E+00 0.0000000E+00  955.9100     100400\n" +
                            "   38039.93      15016.26     0.0000000E+00 0.0000000E+00  5013.642     010400\n" +
                            "  0.0000000E+00 0.0000000E+00  2008.924      3417.443     0.0000000E+00 001400\n" +
                            "  0.0000000E+00 0.0000000E+00 -2518.793     -2020.679     0.0000000E+00 100301\n" +
                            "  0.0000000E+00 0.0000000E+00 -16310.03     -9352.753     0.0000000E+00 010301\n" +
                            "  -11697.17     -2947.266     0.0000000E+00 0.0000000E+00 -186.2735     001301\n" +
                            "   633.3963      48.93620     0.0000000E+00 0.0000000E+00  49.14344     100202\n" +
                            "   3352.722      784.4466     0.0000000E+00 0.0000000E+00  681.4448     010202\n" +
                            "  0.0000000E+00 0.0000000E+00  24.33828      626.1807     0.0000000E+00 001202\n" +
                            "  0.0000000E+00 0.0000000E+00 -24.38661     -32.88545     0.0000000E+00 100103\n" +
                            "  0.0000000E+00 0.0000000E+00 -303.7957     -187.1105     0.0000000E+00 010103\n" +
                            "  -51.10203      22.15589     0.0000000E+00 0.0000000E+00  11.58924     001103\n" +
                            "  -2.878342     -2.905908     0.0000000E+00 0.0000000E+00 -2.088242     100004\n" +
                            "   12.27372     0.8658855     0.0000000E+00 0.0000000E+00-0.8325962     010004\n" +
                            "  0.0000000E+00 0.0000000E+00  28.00688      12.79450     0.0000000E+00 001004\n" +
                            "  0.0000000E+00 0.0000000E+00  1671.738      1967.732     0.0000000E+00 000500\n" +
                            "  -7882.485     -1900.258     0.0000000E+00 0.0000000E+00  375.7916     000401\n" +
                            "  0.0000000E+00 0.0000000E+00 -849.9375      319.2540     0.0000000E+00 000302\n" +
                            "  -353.7030     -52.98284     0.0000000E+00 0.0000000E+00  45.61004     000203\n" +
                            "  0.0000000E+00 0.0000000E+00 -10.05925      10.57356     0.0000000E+00 000104\n" +
                            "   1.357055     0.7064351     0.0000000E+00 0.0000000E+00  1.370990     000005"
            );

            part1beforeFirstQS1.map = CosyArbitraryOrder.readMap(
                    "  0.7828284E-02 -1.319084     0.0000000E+00 0.0000000E+00 0.1438595     100000\n" +
                            "  0.7540151     0.6886306     0.0000000E+00 0.0000000E+00 0.1571879     010000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.8587183     -2.740320     0.0000000E+00 001000\n" +
                            "  0.0000000E+00 0.0000000E+00  1.053591     -2.197666     0.0000000E+00 000100\n" +
                            "  0.0000000E+00 0.0000000E+00 0.0000000E+00 0.0000000E+00  1.000000     000010\n" +
                            " -0.1072417    -0.3064101     0.0000000E+00 0.0000000E+00 0.2690553     000001\n" +
                            "   2.877819      6.402175     0.0000000E+00 0.0000000E+00-0.4147962     200000\n" +
                            "   4.260694      9.063659     0.0000000E+00 0.0000000E+00-0.3383474E-01 110000\n" +
                            "   1.460658      2.978433     0.0000000E+00 0.0000000E+00-0.2779657     020000\n" +
                            "  0.0000000E+00 0.0000000E+00-0.2380786      2.832377     0.0000000E+00 101000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.1899553      3.968606     0.0000000E+00 011000\n" +
                            "  0.6556226      3.203793     0.0000000E+00 0.0000000E+00-0.8711936     002000\n" +
                            "  0.0000000E+00 0.0000000E+00-0.1921535      3.479036     0.0000000E+00 100100\n" +
                            "  0.0000000E+00 0.0000000E+00 0.2233541      4.642598     0.0000000E+00 010100\n" +
                            "   1.819593      7.760816     0.0000000E+00 0.0000000E+00 -1.722926     001100\n" +
                            "  0.9170360      1.324710     0.0000000E+00 0.0000000E+00-0.1016106     100001\n" +
                            "  0.2706309      1.324366     0.0000000E+00 0.0000000E+00-0.9119836E-01 010001\n" +
                            "  0.0000000E+00 0.0000000E+00 0.2915051     0.7664775     0.0000000E+00 001001\n" +
                            "   1.201640      4.666503     0.0000000E+00 0.0000000E+00 -1.149934     000200\n" +
                            "  0.0000000E+00 0.0000000E+00-0.2220165      2.394942     0.0000000E+00 000101\n" +
                            "  0.9055809E-01 0.1039881     0.0000000E+00 0.0000000E+00-0.2323333     000002\n" +
                            "  -5.963576     -12.99788     0.0000000E+00 0.0000000E+00  2.249726     300000\n" +
                            "  -10.97378     -27.85650     0.0000000E+00 0.0000000E+00  3.331436     210000\n" +
                            "  -8.882805     -21.73976     0.0000000E+00 0.0000000E+00  1.166356     120000\n" +
                            "  -2.281277     -6.392528     0.0000000E+00 0.0000000E+00 0.8615786E-01 030000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.8560788     -1.851524     0.0000000E+00 201000\n" +
                            "  0.0000000E+00 0.0000000E+00  2.390018     -1.536821     0.0000000E+00 111000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.3358542    -0.7140982     0.0000000E+00 021000\n" +
                            "  -6.958415     -14.09308     0.0000000E+00 0.0000000E+00  2.248634     102000\n" +
                            "  -3.240996     -9.785670     0.0000000E+00 0.0000000E+00  1.916061     012000\n" +
                            "  0.0000000E+00 0.0000000E+00 -2.946323     -9.140951     0.0000000E+00 003000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.9976477     -2.933691     0.0000000E+00 200100\n" +
                            "  0.0000000E+00 0.0000000E+00  2.147355     -2.255308     0.0000000E+00 110100\n" +
                            "  0.0000000E+00 0.0000000E+00 0.6354115     -2.039068     0.0000000E+00 020100\n" +
                            "  -15.89111     -33.56373     0.0000000E+00 0.0000000E+00  5.166875     101100\n" +
                            "  -8.354479     -23.35483     0.0000000E+00 0.0000000E+00  3.927974     011100\n" +
                            "  0.0000000E+00 0.0000000E+00 -7.250960     -31.40116     0.0000000E+00 002100\n" +
                            "  -2.956528     -4.078133     0.0000000E+00 0.0000000E+00  1.283535     200001\n" +
                            "  -6.676026     -12.34434     0.0000000E+00 0.0000000E+00  1.090483     110001\n" +
                            "  -3.558958     -6.639710     0.0000000E+00 0.0000000E+00 0.5725057     020001\n" +
                            "  0.0000000E+00 0.0000000E+00-0.1350591    -0.2580439     0.0000000E+00 101001\n" +
                            "  0.0000000E+00 0.0000000E+00-0.1847419     -2.567035     0.0000000E+00 011001\n" +
                            "  -1.396778     -2.400874     0.0000000E+00 0.0000000E+00  1.664167     002001\n" +
                            "  -9.260090     -19.93480     0.0000000E+00 0.0000000E+00  2.894466     100200\n" +
                            "  -5.210387     -14.34224     0.0000000E+00 0.0000000E+00  2.024370     010200\n" +
                            "  0.0000000E+00 0.0000000E+00 -5.886924     -36.45714     0.0000000E+00 001200\n" +
                            "  0.0000000E+00 0.0000000E+00-0.5971328E-01 -1.892520     0.0000000E+00 100101\n" +
                            "  0.0000000E+00 0.0000000E+00-0.4447009     -5.135742     0.0000000E+00 010101\n" +
                            "  -3.989418     -9.130292     0.0000000E+00 0.0000000E+00  4.258134     001101\n" +
                            " -0.8973061    -0.9526634     0.0000000E+00 0.0000000E+00 0.2184502     100002\n" +
                            " -0.7155362     -1.602133     0.0000000E+00 0.0000000E+00 0.1304103     010002\n" +
                            "  0.0000000E+00 0.0000000E+00-0.3464416    -0.5140387     0.0000000E+00 001002\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.183540     -15.50738     0.0000000E+00 000300\n" +
                            "  -2.916785     -7.502554     0.0000000E+00 0.0000000E+00  2.999497     000201\n" +
                            "  0.0000000E+00 0.0000000E+00-0.1465090     -2.060951     0.0000000E+00 000102\n" +
                            " -0.8597870E-01-0.7598685E-01 0.0000000E+00 0.0000000E+00 0.2086788     000003\n" +
                            "   19.20754      30.83302     0.0000000E+00 0.0000000E+00 -8.243322     400000\n" +
                            "   41.90009      83.30586     0.0000000E+00 0.0000000E+00 -18.69076     310000\n" +
                            "   36.68398      83.78925     0.0000000E+00 0.0000000E+00 -17.11930     220000\n" +
                            "   19.62291      43.77809     0.0000000E+00 0.0000000E+00 -6.372670     130000\n" +
                            "   5.353220      10.72036     0.0000000E+00 0.0000000E+00-0.8480799     040000\n" +
                            "  0.0000000E+00 0.0000000E+00  1.996195      6.281805     0.0000000E+00 301000\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.888002      18.58935     0.0000000E+00 211000\n" +
                            "  0.0000000E+00 0.0000000E+00 -6.974286      13.61536     0.0000000E+00 121000\n" +
                            "  0.0000000E+00 0.0000000E+00 -2.392231      4.002032     0.0000000E+00 031000\n" +
                            "   29.32236      50.57152     0.0000000E+00 0.0000000E+00 -12.54190     202000\n" +
                            "   39.43168      78.78119     0.0000000E+00 0.0000000E+00 -10.50941     112000\n" +
                            "   13.70718      30.05304     0.0000000E+00 0.0000000E+00 -3.627508     022000\n" +
                            "  0.0000000E+00 0.0000000E+00  8.545828      14.25732     0.0000000E+00 103000\n" +
                            "  0.0000000E+00 0.0000000E+00  9.281643      20.06507     0.0000000E+00 013000\n" +
                            "   5.653070      12.03646     0.0000000E+00 0.0000000E+00 -9.163026     004000\n" +
                            "  0.0000000E+00 0.0000000E+00 0.7523245      9.838528     0.0000000E+00 300100\n" +
                            "  0.0000000E+00 0.0000000E+00 -3.413807      26.13824     0.0000000E+00 210100\n" +
                            "  0.0000000E+00 0.0000000E+00 -7.284151      19.53268     0.0000000E+00 120100\n" +
                            "  0.0000000E+00 0.0000000E+00 -2.094033      6.856495     0.0000000E+00 030100\n" +
                            "   65.61942      120.1196     0.0000000E+00 0.0000000E+00 -29.37206     201100\n" +
                            "   86.08986      183.9537     0.0000000E+00 0.0000000E+00 -26.56771     111100\n" +
                            "   31.45451      72.52939     0.0000000E+00 0.0000000E+00 -9.100089     021100\n" +
                            "  0.0000000E+00 0.0000000E+00  23.64439      50.68704     0.0000000E+00 102100\n" +
                            "  0.0000000E+00 0.0000000E+00  24.81914      70.43925     0.0000000E+00 012100\n" +
                            "   25.54412      57.90896     0.0000000E+00 0.0000000E+00 -37.72497     003100\n" +
                            "   12.68501      14.45751     0.0000000E+00 0.0000000E+00 -6.180127     300001\n" +
                            "   26.30984      44.97289     0.0000000E+00 0.0000000E+00 -12.67785     210001\n" +
                            "   21.94651      44.76232     0.0000000E+00 0.0000000E+00 -7.625915     120001\n" +
                            "   7.183228      16.40749     0.0000000E+00 0.0000000E+00 -1.156727     030001\n" +
                            "  0.0000000E+00 0.0000000E+00  2.165662      4.219285     0.0000000E+00 201001\n" +
                            "  0.0000000E+00 0.0000000E+00 -2.069595      5.714886     0.0000000E+00 111001\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.404785      1.790441     0.0000000E+00 021001\n" +
                            "   16.25210      20.49946     0.0000000E+00 0.0000000E+00 -6.154392     102001\n" +
                            "   10.26424      20.47436     0.0000000E+00 0.0000000E+00 -5.132639     012001\n" +
                            "  0.0000000E+00 0.0000000E+00  7.940844      11.22157     0.0000000E+00 003001\n" +
                            "   37.01046      70.78255     0.0000000E+00 0.0000000E+00 -17.25909     200200\n" +
                            "   50.16997      112.6172     0.0000000E+00 0.0000000E+00 -16.65734     110200\n" +
                            "   20.31416      47.70729     0.0000000E+00 0.0000000E+00 -5.911471     020200\n" +
                            "  0.0000000E+00 0.0000000E+00  20.94250      60.27722     0.0000000E+00 101200\n" +
                            "  0.0000000E+00 0.0000000E+00  21.59099      83.79336     0.0000000E+00 011200\n" +
                            "   43.62231      105.0274     0.0000000E+00 0.0000000E+00 -59.83045     002200\n" +
                            "  0.0000000E+00 0.0000000E+00  1.081552      7.128568     0.0000000E+00 200101\n" +
                            "  0.0000000E+00 0.0000000E+00 -3.645809      9.001504     0.0000000E+00 110101\n" +
                            "  0.0000000E+00 0.0000000E+00 -2.052912      5.072027     0.0000000E+00 020101\n" +
                            "   43.05075      62.49849     0.0000000E+00 0.0000000E+00 -16.35406     101101\n" +
                            "   27.41567      58.25196     0.0000000E+00 0.0000000E+00 -13.23483     011101\n" +
                            "  0.0000000E+00 0.0000000E+00  26.15084      53.99526     0.0000000E+00 002101\n" +
                            "   3.911513      3.384996     0.0000000E+00 0.0000000E+00 -2.387116     200002\n" +
                            "   8.980839      13.32743     0.0000000E+00 0.0000000E+00 -3.065087     110002\n" +
                            "   5.636020      9.455508     0.0000000E+00 0.0000000E+00 -1.323459     020002\n" +
                            "  0.0000000E+00 0.0000000E+00 0.6766453     0.2432963E-01 0.0000000E+00 101002\n" +
                            "  0.0000000E+00 0.0000000E+00 0.2866946      1.906158     0.0000000E+00 011002\n" +
                            "   2.260700      2.477399     0.0000000E+00 0.0000000E+00 -2.596571     002002\n" +
                            "  0.0000000E+00 0.0000000E+00  5.802658      25.09390     0.0000000E+00 100300\n" +
                            "  0.0000000E+00 0.0000000E+00  6.257043      35.47661     0.0000000E+00 010300\n" +
                            "   34.01529      87.77905     0.0000000E+00 0.0000000E+00 -43.91806     001300\n" +
                            "   28.37914      45.46070     0.0000000E+00 0.0000000E+00 -10.60450     100201\n" +
                            "   18.83695      41.79886     0.0000000E+00 0.0000000E+00 -8.215068     010201\n" +
                            "  0.0000000E+00 0.0000000E+00  27.20235      79.98356     0.0000000E+00 001201\n" +
                            "  0.0000000E+00 0.0000000E+00 0.6005989      1.341440     0.0000000E+00 100102\n" +
                            "  0.0000000E+00 0.0000000E+00 0.6200732      5.137204     0.0000000E+00 010102\n" +
                            "   6.991243      10.74326     0.0000000E+00 0.0000000E+00 -7.669043     001102\n" +
                            "  0.9787825     0.8016682     0.0000000E+00 0.0000000E+00-0.3665836     100003\n" +
                            "   1.037695      1.727263     0.0000000E+00 0.0000000E+00-0.2362892     010003\n" +
                            "  0.0000000E+00 0.0000000E+00 0.3979495     0.3949477     0.0000000E+00 001003\n" +
                            "   10.51848      29.23319     0.0000000E+00 0.0000000E+00 -12.82805     000400\n" +
                            "  0.0000000E+00 0.0000000E+00  8.607140      40.23287     0.0000000E+00 000301\n" +
                            "   5.438680      10.22121     0.0000000E+00 0.0000000E+00 -5.818515     000202\n" +
                            "  0.0000000E+00 0.0000000E+00 0.4057248      1.876252     0.0000000E+00 000103\n" +
                            "  0.8718221E-01 0.6229773E-01 0.0000000E+00 0.0000000E+00-0.1956591     000004\n" +
                            "  -73.10344     -89.71093     0.0000000E+00 0.0000000E+00  29.78590     500000\n" +
                            "  -203.5001     -306.4971     0.0000000E+00 0.0000000E+00  83.98649     410000\n" +
                            "  -232.8984     -427.8901     0.0000000E+00 0.0000000E+00  104.1431     320000\n" +
                            "  -138.9259     -316.4893     0.0000000E+00 0.0000000E+00  72.76535     230000\n" +
                            "  -49.08278     -128.9109     0.0000000E+00 0.0000000E+00  25.98785     140000\n" +
                            "  -9.345508     -24.47409     0.0000000E+00 0.0000000E+00  3.296119     050000\n" +
                            "  0.0000000E+00 0.0000000E+00 -17.62297     -10.41504     0.0000000E+00 401000\n" +
                            "  0.0000000E+00 0.0000000E+00 -34.56789     -36.86813     0.0000000E+00 311000\n" +
                            "  0.0000000E+00 0.0000000E+00 -23.08313     -53.44931     0.0000000E+00 221000\n" +
                            "  0.0000000E+00 0.0000000E+00  3.259102     -35.59619     0.0000000E+00 131000\n" +
                            "  0.0000000E+00 0.0000000E+00  4.320679     -8.323097     0.0000000E+00 041000\n" +
                            "  -137.8578     -189.5020     0.0000000E+00 0.0000000E+00  63.23454     302000\n" +
                            "  -231.3399     -389.0975     0.0000000E+00 0.0000000E+00  103.9078     212000\n" +
                            "  -155.3781     -283.3896     0.0000000E+00 0.0000000E+00  53.60527     122000\n" +
                            "  -39.29390     -78.07161     0.0000000E+00 0.0000000E+00  10.22696     032000\n" +
                            "  0.0000000E+00 0.0000000E+00 -39.54259     -68.37002     0.0000000E+00 203000\n" +
                            "  0.0000000E+00 0.0000000E+00 -27.56370     -83.97162     0.0000000E+00 113000\n" +
                            "  0.0000000E+00 0.0000000E+00 -15.06191     -31.57839     0.0000000E+00 023000\n" +
                            "  -80.83627     -110.5211     0.0000000E+00 0.0000000E+00  41.36177     104000\n" +
                            "  -37.59230     -81.57569     0.0000000E+00 0.0000000E+00  36.33267     014000\n" +
                            "  0.0000000E+00 0.0000000E+00 -42.33344     -59.24747     0.0000000E+00 005000\n" +
                            "  0.0000000E+00 0.0000000E+00 -13.27062     -19.04143     0.0000000E+00 400100\n" +
                            "  0.0000000E+00 0.0000000E+00 -24.77446     -59.02625     0.0000000E+00 310100\n" +
                            "  0.0000000E+00 0.0000000E+00 -13.51684     -78.02283     0.0000000E+00 220100\n" +
                            "  0.0000000E+00 0.0000000E+00  7.592016     -48.87341     0.0000000E+00 130100\n" +
                            "  0.0000000E+00 0.0000000E+00  4.967927     -11.95869     0.0000000E+00 040100\n" +
                            "  -316.7102     -450.3952     0.0000000E+00 0.0000000E+00  141.8288     301100\n" +
                            "  -526.5315     -919.3661     0.0000000E+00 0.0000000E+00  238.3961     211100\n" +
                            "  -346.0890     -675.2226     0.0000000E+00 0.0000000E+00  133.4822     121100\n" +
                            "  -88.11625     -189.9277     0.0000000E+00 0.0000000E+00  27.92392     031100\n" +
                            "  0.0000000E+00 0.0000000E+00 -118.7175     -244.7446     0.0000000E+00 202100\n" +
                            "  0.0000000E+00 0.0000000E+00 -87.99317     -298.4652     0.0000000E+00 112100\n" +
                            "  0.0000000E+00 0.0000000E+00 -47.10064     -122.6273     0.0000000E+00 022100\n" +
                            "  -358.9785     -521.4143     0.0000000E+00 0.0000000E+00  178.9610     103100\n" +
                            "  -175.8181     -384.8684     0.0000000E+00 0.0000000E+00  152.5161     013100\n" +
                            "  0.0000000E+00 0.0000000E+00 -203.1085     -348.8420     0.0000000E+00 004100\n" +
                            "  -60.28261     -57.18132     0.0000000E+00 0.0000000E+00  28.20679     400001\n" +
                            "  -160.6008     -211.5499     0.0000000E+00 0.0000000E+00  74.20466     310001\n" +
                            "  -159.0663     -269.8923     0.0000000E+00 0.0000000E+00  79.47889     220001\n" +
                            "  -79.92570     -158.9032     0.0000000E+00 0.0000000E+00  38.60440     130001\n" +
                            "  -20.79442     -41.21809     0.0000000E+00 0.0000000E+00  6.769910     040001\n" +
                            "  0.0000000E+00 0.0000000E+00 -19.06444     -7.204726     0.0000000E+00 301001\n" +
                            "  0.0000000E+00 0.0000000E+00 -26.58758     -37.97206     0.0000000E+00 211001\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.494752     -43.09065     0.0000000E+00 121001\n" +
                            "  0.0000000E+00 0.0000000E+00  5.190704     -14.95970     0.0000000E+00 031001\n" +
                            "  -87.76915     -92.53663     0.0000000E+00 0.0000000E+00  47.92917     202001\n" +
                            "  -131.1134     -188.0541     0.0000000E+00 0.0000000E+00  51.09987     112001\n" +
                            "  -53.10115     -90.47981     0.0000000E+00 0.0000000E+00  17.04018     022001\n" +
                            "  0.0000000E+00 0.0000000E+00 -30.61377     -19.10674     0.0000000E+00 103001\n" +
                            "  0.0000000E+00 0.0000000E+00 -30.43656     -36.40711     0.0000000E+00 013001\n" +
                            "  -21.47270     -26.37241     0.0000000E+00 0.0000000E+00  29.92495     004001\n" +
                            "  -182.1556     -265.2711     0.0000000E+00 0.0000000E+00  80.31091     300200\n" +
                            "  -306.5633     -554.0923     0.0000000E+00 0.0000000E+00  140.1446     210200\n" +
                            "  -202.8556     -422.5487     0.0000000E+00 0.0000000E+00  84.43099     120200\n" +
                            "  -53.88901     -124.9413     0.0000000E+00 0.0000000E+00  18.41828     030200\n" +
                            "  0.0000000E+00 0.0000000E+00 -116.5463     -293.9563     0.0000000E+00 201200\n" +
                            "  0.0000000E+00 0.0000000E+00 -87.71248     -356.6406     0.0000000E+00 111200\n" +
                            "  0.0000000E+00 0.0000000E+00 -45.49717     -157.3662     0.0000000E+00 021200\n" +
                            "  -604.9659     -926.0889     0.0000000E+00 0.0000000E+00  292.9825     102200\n" +
                            "  -309.7080     -688.1632     0.0000000E+00 0.0000000E+00  244.4874     012200\n" +
                            "  0.0000000E+00 0.0000000E+00 -394.0598     -823.9039     0.0000000E+00 003200\n" +
                            "  0.0000000E+00 0.0000000E+00 -16.99807     -16.16632     0.0000000E+00 300101\n" +
                            "  0.0000000E+00 0.0000000E+00 -19.89631     -65.37489     0.0000000E+00 210101\n" +
                            "  0.0000000E+00 0.0000000E+00  5.119649     -68.00960     0.0000000E+00 120101\n" +
                            "  0.0000000E+00 0.0000000E+00  6.076001     -25.52812     0.0000000E+00 030101\n" +
                            "  -226.4862     -271.1789     0.0000000E+00 0.0000000E+00  120.5060     201101\n" +
                            "  -328.8537     -521.2858     0.0000000E+00 0.0000000E+00  131.9448     111101\n" +
                            "  -132.5577     -247.7371     0.0000000E+00 0.0000000E+00  46.80853     021101\n" +
                            "  0.0000000E+00 0.0000000E+00 -104.5345     -92.04031     0.0000000E+00 102101\n" +
                            "  0.0000000E+00 0.0000000E+00 -102.6296     -160.4256     0.0000000E+00 012101\n" +
                            "  -106.6722     -150.9906     0.0000000E+00 0.0000000E+00  142.2588     003101\n" +
                            "  -24.83642     -19.14418     0.0000000E+00 0.0000000E+00  12.80366     300002\n" +
                            "  -56.20296     -67.46760     0.0000000E+00 0.0000000E+00  29.78827     210002\n" +
                            "  -46.11382     -74.73324     0.0000000E+00 0.0000000E+00  22.35273     120002\n" +
                            "  -15.30225     -30.09001     0.0000000E+00 0.0000000E+00  4.790790     030002\n" +
                            "  0.0000000E+00 0.0000000E+00 -8.383326     -5.276689     0.0000000E+00 201002\n" +
                            "  0.0000000E+00 0.0000000E+00 -4.558439     -11.09066     0.0000000E+00 111002\n" +
                            "  0.0000000E+00 0.0000000E+00 0.9438009     -4.488551     0.0000000E+00 021002\n" +
                            "  -29.32002     -26.10137     0.0000000E+00 0.0000000E+00  13.36937     102002\n" +
                            "  -21.88316     -31.96469     0.0000000E+00 0.0000000E+00  10.73294     012002\n" +
                            "  0.0000000E+00 0.0000000E+00 -14.89715     -12.97532     0.0000000E+00 003002\n" +
                            "  0.0000000E+00 0.0000000E+00 -36.75096     -119.1718     0.0000000E+00 200300\n" +
                            "  0.0000000E+00 0.0000000E+00 -25.86842     -144.2396     0.0000000E+00 110300\n" +
                            "  0.0000000E+00 0.0000000E+00 -12.84396     -69.20500     0.0000000E+00 020300\n" +
                            "  -463.5856     -745.2555     0.0000000E+00 0.0000000E+00  217.2918     101300\n" +
                            "  -246.9153     -560.8353     0.0000000E+00 0.0000000E+00  179.1383     011300\n" +
                            "  0.0000000E+00 0.0000000E+00 -389.0353     -988.0659     0.0000000E+00 002300\n" +
                            "  -144.0939     -190.2765     0.0000000E+00 0.0000000E+00  76.22094     200201\n" +
                            "  -210.5793     -363.4365     0.0000000E+00 0.0000000E+00  86.83332     110201\n" +
                            "  -89.45409     -178.8887     0.0000000E+00 0.0000000E+00  32.59426     020201\n" +
                            "  0.0000000E+00 0.0000000E+00 -113.9040     -137.5249     0.0000000E+00 101201\n" +
                            "  0.0000000E+00 0.0000000E+00 -109.6678     -227.9869     0.0000000E+00 011201\n" +
                            "  -198.7356     -316.8225     0.0000000E+00 0.0000000E+00  253.1779     002201\n" +
                            "  0.0000000E+00 0.0000000E+00 -8.099850     -10.75031     0.0000000E+00 200102\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.334188     -19.42265     0.0000000E+00 110102\n" +
                            "  0.0000000E+00 0.0000000E+00  2.537065     -10.66265     0.0000000E+00 020102\n" +
                            "  -85.98383     -92.20654     0.0000000E+00 0.0000000E+00  37.84419     101102\n" +
                            "  -62.50948     -102.9933     0.0000000E+00 0.0000000E+00  30.77995     011102\n" +
                            "  0.0000000E+00 0.0000000E+00 -57.98841     -74.07544     0.0000000E+00 002102\n" +
                            "  -5.760660     -3.468415     0.0000000E+00 0.0000000E+00  3.886969     200003\n" +
                            "  -12.50891     -14.50911     0.0000000E+00 0.0000000E+00  6.052367     110003\n" +
                            "  -8.064783     -11.95627     0.0000000E+00 0.0000000E+00  2.701053     020003\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.559477     0.7005237E-01 0.0000000E+00 101003\n" +
                            "  0.0000000E+00 0.0000000E+00-0.7218252     -1.541617     0.0000000E+00 011003\n" +
                            "  -3.359988     -2.647315     0.0000000E+00 0.0000000E+00  3.752397     002003\n" +
                            "  -137.7093     -232.5514     0.0000000E+00 0.0000000E+00  62.20573     100400\n" +
                            "  -76.42593     -178.3092     0.0000000E+00 0.0000000E+00  50.89010     010400\n" +
                            "  0.0000000E+00 0.0000000E+00 -195.3249     -607.6721     0.0000000E+00 001400\n" +
                            "  0.0000000E+00 0.0000000E+00 -39.49969     -67.64111     0.0000000E+00 100301\n" +
                            "  0.0000000E+00 0.0000000E+00 -37.80218     -110.1611     0.0000000E+00 010301\n" +
                            "  -166.8882     -297.4944     0.0000000E+00 0.0000000E+00  203.8323     001301\n" +
                            "  -61.79523     -76.23249     0.0000000E+00 0.0000000E+00  26.45709     100202\n" +
                            "  -45.65934     -82.21284     0.0000000E+00 0.0000000E+00  21.37062     010202\n" +
                            "  0.0000000E+00 0.0000000E+00 -70.62779     -127.6605     0.0000000E+00 001202\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.727174     -1.056247     0.0000000E+00 100103\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.103384     -5.100442     0.0000000E+00 010103\n" +
                            "  -11.10343     -12.49026     0.0000000E+00 0.0000000E+00  12.16474     001103\n" +
                            "  -1.142543    -0.7327599     0.0000000E+00 0.0000000E+00 0.5555528     100004\n" +
                            "  -1.361593     -1.818277     0.0000000E+00 0.0000000E+00 0.4075491     010004\n" +
                            "  0.0000000E+00 0.0000000E+00-0.4602319    -0.3217041     0.0000000E+00 001004\n" +
                            "  0.0000000E+00 0.0000000E+00 -39.40264     -155.2997     0.0000000E+00 000500\n" +
                            "  -54.38216     -108.4609     0.0000000E+00 0.0000000E+00  63.86460     000401\n" +
                            "  0.0000000E+00 0.0000000E+00 -26.95901     -72.30949     0.0000000E+00 000302\n" +
                            "  -9.084469     -13.05441     0.0000000E+00 0.0000000E+00  9.838774     000203\n" +
                            "  0.0000000E+00 0.0000000E+00-0.6431571     -1.750656     0.0000000E+00 000104\n" +
                            " -0.9228584E-01-0.5462883E-01 0.0000000E+00 0.0000000E+00 0.1900584     000005"
            );

            part1Optics.map = CosyArbitraryOrder.readMap(
                    "  0.5722045      1.443414     0.0000000E+00 0.0000000E+00-0.7107165E-03 100000\n" +
                            " -0.4659662     0.5722045     0.0000000E+00 0.0000000E+00 0.2106404E-03 010000\n" +
                            "  0.0000000E+00 0.0000000E+00 -1.032740    -0.2005047     0.0000000E+00 001000\n" +
                            "  0.0000000E+00 0.0000000E+00-0.3319195     -1.032740     0.0000000E+00 000100\n" +
                            "  0.0000000E+00 0.0000000E+00 0.0000000E+00 0.0000000E+00  1.000000     000010\n" +
                            " -0.2106404E-03 0.7107165E-03 0.0000000E+00 0.0000000E+00 0.7618440     000001\n" +
                            "   8.867764      2.244751     0.0000000E+00 0.0000000E+00-0.6481539     200000\n" +
                            "   7.952632     -1.330588     0.0000000E+00 0.0000000E+00 0.3682313     110000\n" +
                            "  -1.178491     -6.407345     0.0000000E+00 0.0000000E+00-0.6001069E-01 020000\n" +
                            "  0.0000000E+00 0.0000000E+00 -8.608811     -7.996684     0.0000000E+00 101000\n" +
                            "  0.0000000E+00 0.0000000E+00 -6.112686      2.370038     0.0000000E+00 011000\n" +
                            " -0.4710091      4.519944     0.0000000E+00 0.0000000E+00 -2.901465     002000\n" +
                            "  0.0000000E+00 0.0000000E+00 -11.03057      3.897133     0.0000000E+00 100100\n" +
                            "  0.0000000E+00 0.0000000E+00  3.269214      7.509121     0.0000000E+00 010100\n" +
                            "   6.968307      6.678980     0.0000000E+00 0.0000000E+00 -1.128133     001100\n" +
                            " -0.3839441      1.273263     0.0000000E+00 0.0000000E+00-0.3305547     100001\n" +
                            "  0.1029066    -0.3933320     0.0000000E+00 0.0000000E+00 0.9796902E-01 010001\n" +
                            "  0.0000000E+00 0.0000000E+00-0.7671958     -5.766721     0.0000000E+00 001001\n" +
                            "   2.702583     -4.267139     0.0000000E+00 0.0000000E+00-0.9921755     000200\n" +
                            "  0.0000000E+00 0.0000000E+00  1.674869    -0.7610380     0.0000000E+00 000101\n" +
                            " -0.4898838E-01 0.1652717     0.0000000E+00 0.0000000E+00-0.6898736     000002\n" +
                            "   55.33686     -65.68880     0.0000000E+00 0.0000000E+00  10.66625     300000\n" +
                            "  -97.63241     -148.1771     0.0000000E+00 0.0000000E+00  9.201298     210000\n" +
                            "  -241.5374     -201.6418     0.0000000E+00 0.0000000E+00  10.69923     120000\n" +
                            "  -86.46964     -21.68257     0.0000000E+00 0.0000000E+00 -4.136529     030000\n" +
                            "  0.0000000E+00 0.0000000E+00 -75.33037      39.81479     0.0000000E+00 201000\n" +
                            "  0.0000000E+00 0.0000000E+00 -2.063715     -9.368449     0.0000000E+00 111000\n" +
                            "  0.0000000E+00 0.0000000E+00  8.822833      45.72907     0.0000000E+00 021000\n" +
                            "   101.9189      15.04791     0.0000000E+00 0.0000000E+00  6.489782     102000\n" +
                            "   14.61864      43.78665     0.0000000E+00 0.0000000E+00 -26.80590     012000\n" +
                            "  0.0000000E+00 0.0000000E+00 -31.55609      21.99190     0.0000000E+00 003000\n" +
                            "  0.0000000E+00 0.0000000E+00 -192.7733     -67.19762     0.0000000E+00 200100\n" +
                            "  0.0000000E+00 0.0000000E+00  69.10699     -22.56408     0.0000000E+00 110100\n" +
                            "  0.0000000E+00 0.0000000E+00  15.63597     -43.03824     0.0000000E+00 020100\n" +
                            "   105.1674      7.624542     0.0000000E+00 0.0000000E+00 -30.06884     101100\n" +
                            "   29.00678      33.13744     0.0000000E+00 0.0000000E+00  3.817790     011100\n" +
                            "  0.0000000E+00 0.0000000E+00 -201.3675      9.689515     0.0000000E+00 002100\n" +
                            "   36.98078     -5.247055     0.0000000E+00 0.0000000E+00  5.388788     200001\n" +
                            "   15.25081      2.857125     0.0000000E+00 0.0000000E+00 0.7679671     110001\n" +
                            "  -2.437157     -19.24455     0.0000000E+00 0.0000000E+00  3.556558     020001\n" +
                            "  0.0000000E+00 0.0000000E+00 -30.06345      51.20736     0.0000000E+00 101001\n" +
                            "  0.0000000E+00 0.0000000E+00  7.425588     -15.08126     0.0000000E+00 011001\n" +
                            "   29.21674     -13.81174     0.0000000E+00 0.0000000E+00  19.99865     002001\n" +
                            "   28.87680     -82.63832     0.0000000E+00 0.0000000E+00  42.72234     100200\n" +
                            "  -46.61800      87.84382     0.0000000E+00 0.0000000E+00 -5.108397     010200\n" +
                            "  0.0000000E+00 0.0000000E+00 -109.9378      163.3731     0.0000000E+00 001200\n" +
                            "  0.0000000E+00 0.0000000E+00 -93.43959     -16.79581     0.0000000E+00 100101\n" +
                            "  0.0000000E+00 0.0000000E+00  27.79317      6.460836     0.0000000E+00 010101\n" +
                            "   21.45136     -44.72079     0.0000000E+00 0.0000000E+00  7.119753     001101\n" +
                            "   4.923085     -2.549844     0.0000000E+00 0.0000000E+00  1.271135     100002\n" +
                            "   2.217970      2.713343     0.0000000E+00 0.0000000E+00-0.3739325     010002\n" +
                            "  0.0000000E+00 0.0000000E+00  6.821323      20.98435     0.0000000E+00 001002\n" +
                            "  0.0000000E+00 0.0000000E+00 -186.9471     -12.99388     0.0000000E+00 000300\n" +
                            "   9.227247     -54.65566     0.0000000E+00 0.0000000E+00  10.70747     000201\n" +
                            "  0.0000000E+00 0.0000000E+00 -8.170474      8.254365     0.0000000E+00 000102\n" +
                            "  0.1257851    -0.4236583     0.0000000E+00 0.0000000E+00 0.6903145     000003\n" +
                            "  -686.3178     -84.01435     0.0000000E+00 0.0000000E+00 -107.8825     400000\n" +
                            "  -1987.444     -520.5867     0.0000000E+00 0.0000000E+00 -4.472348     310000\n" +
                            "  -3301.861      764.3520     0.0000000E+00 0.0000000E+00 -133.5157     220000\n" +
                            "  -224.4857      1284.232     0.0000000E+00 0.0000000E+00 -81.88478     130000\n" +
                            "   694.1792      777.9124     0.0000000E+00 0.0000000E+00 -66.98516     040000\n" +
                            "  0.0000000E+00 0.0000000E+00 -243.0727     -896.0575     0.0000000E+00 301000\n" +
                            "  0.0000000E+00 0.0000000E+00  723.6675     -116.9204     0.0000000E+00 211000\n" +
                            "  0.0000000E+00 0.0000000E+00  831.5494      85.68529     0.0000000E+00 121000\n" +
                            "  0.0000000E+00 0.0000000E+00 -18.42311      475.8794     0.0000000E+00 031000\n" +
                            "  -434.3304     -439.2914     0.0000000E+00 0.0000000E+00 -351.8357     202000\n" +
                            "  -400.2691     -560.6493     0.0000000E+00 0.0000000E+00  35.15395     112000\n" +
                            "  -618.9968      274.9538     0.0000000E+00 0.0000000E+00 -314.1584     022000\n" +
                            "  0.0000000E+00 0.0000000E+00 -135.3079     -508.3963     0.0000000E+00 103000\n" +
                            "  0.0000000E+00 0.0000000E+00  258.7135      169.0980     0.0000000E+00 013000\n" +
                            "  -86.60415      169.2502     0.0000000E+00 0.0000000E+00 -181.0671     004000\n" +
                            "  0.0000000E+00 0.0000000E+00 -311.6862     -896.9641     0.0000000E+00 300100\n" +
                            "  0.0000000E+00 0.0000000E+00  2306.028      468.1779     0.0000000E+00 210100\n" +
                            "  0.0000000E+00 0.0000000E+00  3027.357      774.9126     0.0000000E+00 120100\n" +
                            "  0.0000000E+00 0.0000000E+00 -150.1139      280.4737     0.0000000E+00 030100\n" +
                            "   936.9835      32.12650     0.0000000E+00 0.0000000E+00 -236.2331     201100\n" +
                            "  -68.00760      1417.961     0.0000000E+00 0.0000000E+00 -462.8708     111100\n" +
                            "  -331.3040     -441.3709     0.0000000E+00 0.0000000E+00  177.8840     021100\n" +
                            "  0.0000000E+00 0.0000000E+00 -504.8889     -1287.163     0.0000000E+00 102100\n" +
                            "  0.0000000E+00 0.0000000E+00 -2025.952     -2184.795     0.0000000E+00 012100\n" +
                            "  -534.6855      655.4790     0.0000000E+00 0.0000000E+00 -591.6415     003100\n" +
                            "  -362.3442      59.26446     0.0000000E+00 0.0000000E+00 -89.65988     300001\n" +
                            "  -465.3285     -412.3272     0.0000000E+00 0.0000000E+00 -7.182907     210001\n" +
                            "  -582.3869     -7.351885     0.0000000E+00 0.0000000E+00 -53.12848     120001\n" +
                            "  -138.5051     -135.6390     0.0000000E+00 0.0000000E+00  22.60561     030001\n" +
                            "  0.0000000E+00 0.0000000E+00 -562.6394     -1057.225     0.0000000E+00 201001\n" +
                            "  0.0000000E+00 0.0000000E+00  392.5633     -50.93657     0.0000000E+00 111001\n" +
                            "  0.0000000E+00 0.0000000E+00  6.572928     -531.9075     0.0000000E+00 021001\n" +
                            "  -460.5840      55.17767     0.0000000E+00 0.0000000E+00 -295.1356     102001\n" +
                            "  -54.27816     -339.7766     0.0000000E+00 0.0000000E+00  269.4358     012001\n" +
                            "  0.0000000E+00 0.0000000E+00 -420.5178     -448.5653     0.0000000E+00 003001\n" +
                            "  -1322.384      1000.204     0.0000000E+00 0.0000000E+00 -465.9648     200200\n" +
                            "   299.1752      1928.007     0.0000000E+00 0.0000000E+00 -516.0828     110200\n" +
                            "   1157.305      680.9850     0.0000000E+00 0.0000000E+00 -189.8594     020200\n" +
                            "  0.0000000E+00 0.0000000E+00 -5125.974     -4871.891     0.0000000E+00 101200\n" +
                            "  0.0000000E+00 0.0000000E+00 -90.03718     -925.2781     0.0000000E+00 011200\n" +
                            "  -659.0320      1921.045     0.0000000E+00 0.0000000E+00 -835.5357     002200\n" +
                            "  0.0000000E+00 0.0000000E+00 -508.2658     -1061.414     0.0000000E+00 200101\n" +
                            "  0.0000000E+00 0.0000000E+00  496.3388      68.23662     0.0000000E+00 110101\n" +
                            "  0.0000000E+00 0.0000000E+00  583.7114     -25.87272     0.0000000E+00 020101\n" +
                            "  -321.4916     -509.4788     0.0000000E+00 0.0000000E+00  238.4022     101101\n" +
                            "  -376.0630      670.3585     0.0000000E+00 0.0000000E+00 -17.74498     011101\n" +
                            "  0.0000000E+00 0.0000000E+00  332.0046      141.9705     0.0000000E+00 002101\n" +
                            "  -88.96246      58.46519     0.0000000E+00 0.0000000E+00 -27.46990     200002\n" +
                            "  -60.53944     -75.89097     0.0000000E+00 0.0000000E+00  2.926932     110002\n" +
                            "  -16.88745      44.67758     0.0000000E+00 0.0000000E+00 -13.21506     020002\n" +
                            "  0.0000000E+00 0.0000000E+00 -263.3919     -435.1595     0.0000000E+00 101002\n" +
                            "  0.0000000E+00 0.0000000E+00  106.3657      118.7717     0.0000000E+00 011002\n" +
                            "  -92.95274      55.39852     0.0000000E+00 0.0000000E+00 -120.5890     002002\n" +
                            "  0.0000000E+00 0.0000000E+00 -436.2525     -593.0802     0.0000000E+00 100300\n" +
                            "  0.0000000E+00 0.0000000E+00  1525.280      752.5308     0.0000000E+00 010300\n" +
                            "  -7.251993      1956.467     0.0000000E+00 0.0000000E+00 -294.6110     001300\n" +
                            "  -595.6538      19.96297     0.0000000E+00 0.0000000E+00  43.19750     100201\n" +
                            "  -636.8468      377.2168     0.0000000E+00 0.0000000E+00 -113.7967     010201\n" +
                            "  0.0000000E+00 0.0000000E+00 -1861.101     -1450.343     0.0000000E+00 001201\n" +
                            "  0.0000000E+00 0.0000000E+00 -116.8681     -351.5307     0.0000000E+00 100102\n" +
                            "  0.0000000E+00 0.0000000E+00  15.54458      57.27081     0.0000000E+00 010102\n" +
                            "  -61.55457     -100.7495     0.0000000E+00 0.0000000E+00 -20.11727     001102\n" +
                            "  -8.391773      14.45219     0.0000000E+00 0.0000000E+00 -4.546480     100003\n" +
                            "  -6.036279     -8.922382     0.0000000E+00 0.0000000E+00  1.333879     010003\n" +
                            "  0.0000000E+00 0.0000000E+00 -58.77259     -77.14350     0.0000000E+00 001003\n" +
                            "   741.1839      528.5545     0.0000000E+00 0.0000000E+00  182.3548     000400\n" +
                            "  0.0000000E+00 0.0000000E+00 -1347.963     -1158.980     0.0000000E+00 000301\n" +
                            "   14.20710      5.877857     0.0000000E+00 0.0000000E+00  12.30055     000202\n" +
                            "  0.0000000E+00 0.0000000E+00 -27.73425     -62.21932     0.0000000E+00 000103\n" +
                            " -0.3327029E-01  1.298631     0.0000000E+00 0.0000000E+00-0.8550508     000004\n" +
                            "   6950.894      6291.693     0.0000000E+00 0.0000000E+00  4.076722     500000\n" +
                            "   5151.731      18725.39     0.0000000E+00 0.0000000E+00 -444.2164     410000\n" +
                            "   7668.580      28727.10     0.0000000E+00 0.0000000E+00  323.7031     320000\n" +
                            "   30398.94      25903.17     0.0000000E+00 0.0000000E+00 -1323.582     230000\n" +
                            "   26779.01      3968.102     0.0000000E+00 0.0000000E+00 -142.6870     140000\n" +
                            "   1938.362     -325.2852     0.0000000E+00 0.0000000E+00 -304.8332     050000\n" +
                            "  0.0000000E+00 0.0000000E+00  3146.666      6974.695     0.0000000E+00 401000\n" +
                            "  0.0000000E+00 0.0000000E+00  10996.51      11330.35     0.0000000E+00 311000\n" +
                            "  0.0000000E+00 0.0000000E+00  13649.65      14632.82     0.0000000E+00 221000\n" +
                            "  0.0000000E+00 0.0000000E+00 -6541.720      3121.107     0.0000000E+00 131000\n" +
                            "  0.0000000E+00 0.0000000E+00 -2236.614      2760.168     0.0000000E+00 041000\n" +
                            "   7851.864     -376.6933     0.0000000E+00 0.0000000E+00  2425.930     302000\n" +
                            "   1755.630      4997.399     0.0000000E+00 0.0000000E+00 -609.9600     212000\n" +
                            "  -2970.954     -178.8082     0.0000000E+00 0.0000000E+00  3182.158     122000\n" +
                            "   105.8063      9508.927     0.0000000E+00 0.0000000E+00 -3855.337     032000\n" +
                            "  0.0000000E+00 0.0000000E+00  4044.428      8283.020     0.0000000E+00 203000\n" +
                            "  0.0000000E+00 0.0000000E+00 -1906.467      506.7047     0.0000000E+00 113000\n" +
                            "  0.0000000E+00 0.0000000E+00  11142.83      12003.04     0.0000000E+00 023000\n" +
                            "   3124.604     -2846.855     0.0000000E+00 0.0000000E+00  1688.070     104000\n" +
                            "   2331.281      2579.772     0.0000000E+00 0.0000000E+00 -1697.226     014000\n" +
                            "  0.0000000E+00 0.0000000E+00  2988.105      2538.134     0.0000000E+00 005000\n" +
                            "  0.0000000E+00 0.0000000E+00  4505.904      6878.867     0.0000000E+00 400100\n" +
                            "  0.0000000E+00 0.0000000E+00  24863.79      17368.24     0.0000000E+00 310100\n" +
                            "  0.0000000E+00 0.0000000E+00  36806.58      27973.15     0.0000000E+00 220100\n" +
                            "  0.0000000E+00 0.0000000E+00 -19501.33     -3512.438     0.0000000E+00 130100\n" +
                            "  0.0000000E+00 0.0000000E+00 -12045.62     -3230.932     0.0000000E+00 040100\n" +
                            "   1489.686      9295.429     0.0000000E+00 0.0000000E+00 -7895.632     301100\n" +
                            "   22691.44     -671.4690     0.0000000E+00 0.0000000E+00  1966.895     211100\n" +
                            "  -7275.306     -5047.996     0.0000000E+00 0.0000000E+00  6329.747     121100\n" +
                            "  -7901.653     -9135.773     0.0000000E+00 0.0000000E+00  2482.845     031100\n" +
                            "  0.0000000E+00 0.0000000E+00 -20930.11     -3161.488     0.0000000E+00 202100\n" +
                            "  0.0000000E+00 0.0000000E+00  27389.41      27542.67     0.0000000E+00 112100\n" +
                            "  0.0000000E+00 0.0000000E+00 -4530.387      893.3260     0.0000000E+00 022100\n" +
                            "   19867.06      4382.126     0.0000000E+00 0.0000000E+00 -1044.064     103100\n" +
                            "   6698.280     -4353.942     0.0000000E+00 0.0000000E+00 -3507.605     013100\n" +
                            "  0.0000000E+00 0.0000000E+00  443.9341     -1525.598     0.0000000E+00 004100\n" +
                            "   4183.173      902.4462     0.0000000E+00 0.0000000E+00  516.5706     400001\n" +
                            "   3191.338      5593.424     0.0000000E+00 0.0000000E+00 -167.7290     310001\n" +
                            "   3478.491      3030.118     0.0000000E+00 0.0000000E+00  928.7817     220001\n" +
                            "   3599.351      4085.224     0.0000000E+00 0.0000000E+00  13.52693     130001\n" +
                            "   1527.398     -913.1748     0.0000000E+00 0.0000000E+00  386.0906     040001\n" +
                            "  0.0000000E+00 0.0000000E+00  4029.581      7669.542     0.0000000E+00 301001\n" +
                            "  0.0000000E+00 0.0000000E+00  8159.941      8030.431     0.0000000E+00 211001\n" +
                            "  0.0000000E+00 0.0000000E+00  11016.79      8728.762     0.0000000E+00 121001\n" +
                            "  0.0000000E+00 0.0000000E+00 -2579.321     -3416.349     0.0000000E+00 031001\n" +
                            "   9131.679      849.2202     0.0000000E+00 0.0000000E+00  3958.256     202001\n" +
                            "   4663.691      11243.60     0.0000000E+00 0.0000000E+00 -2753.413     112001\n" +
                            "   2542.753     -7437.869     0.0000000E+00 0.0000000E+00  4767.157     022001\n" +
                            "  0.0000000E+00 0.0000000E+00  3145.953      6226.865     0.0000000E+00 103001\n" +
                            "  0.0000000E+00 0.0000000E+00 -10934.60     -10135.98     0.0000000E+00 013001\n" +
                            "  -116.8375     -1573.071     0.0000000E+00 0.0000000E+00  1507.289     004001\n" +
                            "   17664.49      22851.59     0.0000000E+00 0.0000000E+00 -7606.942     300200\n" +
                            "   60142.69      9474.051     0.0000000E+00 0.0000000E+00  2910.929     210200\n" +
                            "   20181.20     -15294.23     0.0000000E+00 0.0000000E+00  2743.415     120200\n" +
                            "  -11224.09     -12316.53     0.0000000E+00 0.0000000E+00  2068.591     030200\n" +
                            "  0.0000000E+00 0.0000000E+00  2808.564      12357.91     0.0000000E+00 201200\n" +
                            "  0.0000000E+00 0.0000000E+00  24205.28      21401.42     0.0000000E+00 111200\n" +
                            "  0.0000000E+00 0.0000000E+00  18371.79      20126.37     0.0000000E+00 021200\n" +
                            "   26363.18      13120.44     0.0000000E+00 0.0000000E+00 -9193.123     102200\n" +
                            "   21872.39     -4800.336     0.0000000E+00 0.0000000E+00 -6642.396     012200\n" +
                            "  0.0000000E+00 0.0000000E+00 -7595.505     -15500.43     0.0000000E+00 003200\n" +
                            "  0.0000000E+00 0.0000000E+00  4773.663      7759.474     0.0000000E+00 300101\n" +
                            "  0.0000000E+00 0.0000000E+00  11442.91      11319.28     0.0000000E+00 210101\n" +
                            "  0.0000000E+00 0.0000000E+00  18487.46      17064.34     0.0000000E+00 120101\n" +
                            "  0.0000000E+00 0.0000000E+00 -196.4005     -1073.010     0.0000000E+00 030101\n" +
                            "  -8282.258      12993.70     0.0000000E+00 0.0000000E+00 -4426.654     201101\n" +
                            "   10009.03      8605.498     0.0000000E+00 0.0000000E+00 -1671.061     111101\n" +
                            "   13190.65      4225.481     0.0000000E+00 0.0000000E+00  548.6468     021101\n" +
                            "  0.0000000E+00 0.0000000E+00 -35083.23     -19501.47     0.0000000E+00 102101\n" +
                            "  0.0000000E+00 0.0000000E+00  14552.17      9147.041     0.0000000E+00 012101\n" +
                            "   3316.315      2575.707     0.0000000E+00 0.0000000E+00  3091.472     003101\n" +
                            "   1186.665     -700.8271     0.0000000E+00 0.0000000E+00  353.1671     300002\n" +
                            "   1035.340      1334.972     0.0000000E+00 0.0000000E+00 -72.21748     210002\n" +
                            "   805.7236     -303.3027     0.0000000E+00 0.0000000E+00  243.5624     120002\n" +
                            "   441.6465      686.1793     0.0000000E+00 0.0000000E+00 -105.4812     030002\n" +
                            "  0.0000000E+00 0.0000000E+00  2526.190      3820.761     0.0000000E+00 201002\n" +
                            "  0.0000000E+00 0.0000000E+00  151.3711      1062.958     0.0000000E+00 111002\n" +
                            "  0.0000000E+00 0.0000000E+00  2780.592      3387.510     0.0000000E+00 021002\n" +
                            "   2479.232     -2231.550     0.0000000E+00 0.0000000E+00  2722.760     102002\n" +
                            "   224.1354      4293.336     0.0000000E+00 0.0000000E+00 -1968.462     012002\n" +
                            "  0.0000000E+00 0.0000000E+00  3952.327      4080.888     0.0000000E+00 003002\n" +
                            "  0.0000000E+00 0.0000000E+00  158.1792      707.1725     0.0000000E+00 200300\n" +
                            "  0.0000000E+00 0.0000000E+00 -7928.588     -3345.473     0.0000000E+00 110300\n" +
                            "  0.0000000E+00 0.0000000E+00 -3998.175     -672.5869     0.0000000E+00 020300\n" +
                            "   14097.87      21979.82     0.0000000E+00 0.0000000E+00 -17630.20     101300\n" +
                            "   8832.463     -13212.08     0.0000000E+00 0.0000000E+00 -4557.995     011300\n" +
                            "  0.0000000E+00 0.0000000E+00  1015.805     -15611.91     0.0000000E+00 002300\n" +
                            "  -5498.957      10360.21     0.0000000E+00 0.0000000E+00 -4704.438     200201\n" +
                            "   17904.04      7166.772     0.0000000E+00 0.0000000E+00  1161.086     110201\n" +
                            "   11862.82      4796.808     0.0000000E+00 0.0000000E+00 -551.3947     020201\n" +
                            "  0.0000000E+00 0.0000000E+00  758.4770      5466.869     0.0000000E+00 101201\n" +
                            "  0.0000000E+00 0.0000000E+00  28380.23      20838.15     0.0000000E+00 011201\n" +
                            "   5076.712      3415.224     0.0000000E+00 0.0000000E+00  4941.689     002201\n" +
                            "  0.0000000E+00 0.0000000E+00  2643.848      3986.322     0.0000000E+00 200102\n" +
                            "  0.0000000E+00 0.0000000E+00  98.74015      1152.472     0.0000000E+00 110102\n" +
                            "  0.0000000E+00 0.0000000E+00  1860.909      3111.237     0.0000000E+00 020102\n" +
                            "  -1082.717      2524.295     0.0000000E+00 0.0000000E+00 -325.5200     101102\n" +
                            "  -2167.814      989.6440     0.0000000E+00 0.0000000E+00 -1385.365     011102\n" +
                            "  0.0000000E+00 0.0000000E+00 -7845.842     -3939.840     0.0000000E+00 002102\n" +
                            "   165.8661     -315.3950     0.0000000E+00 0.0000000E+00  97.01648     200003\n" +
                            "   162.8834      232.5105     0.0000000E+00 0.0000000E+00 -24.92676     110003\n" +
                            "  -5.856367     -135.0153     0.0000000E+00 0.0000000E+00  39.66004     020003\n" +
                            "  0.0000000E+00 0.0000000E+00  1053.941      1259.333     0.0000000E+00 101003\n" +
                            "  0.0000000E+00 0.0000000E+00 -436.8753     -344.2237     0.0000000E+00 011003\n" +
                            "   304.6514     -658.6022     0.0000000E+00 0.0000000E+00  646.9086     002003\n" +
                            "   2012.834      8473.514     0.0000000E+00 0.0000000E+00 -9181.255     100400\n" +
                            "  -13189.97     -12654.37     0.0000000E+00 0.0000000E+00 -704.1077     010400\n" +
                            "  0.0000000E+00 0.0000000E+00  25058.84      5629.695     0.0000000E+00 001400\n" +
                            "  0.0000000E+00 0.0000000E+00  14551.75      12311.19     0.0000000E+00 100301\n" +
                            "  0.0000000E+00 0.0000000E+00  10175.41      8641.705     0.0000000E+00 010301\n" +
                            "   10160.79      1831.449     0.0000000E+00 0.0000000E+00  3099.832     001301\n" +
                            "  -2325.418      1871.356     0.0000000E+00 0.0000000E+00 -1461.028     100202\n" +
                            "  -193.4900     -1287.353     0.0000000E+00 0.0000000E+00  124.6477     010202\n" +
                            "  0.0000000E+00 0.0000000E+00 -7338.056     -5351.846     0.0000000E+00 001202\n" +
                            "  0.0000000E+00 0.0000000E+00  878.3280      1240.387     0.0000000E+00 100103\n" +
                            "  0.0000000E+00 0.0000000E+00 -297.5270     -291.5109     0.0000000E+00 010103\n" +
                            "   405.6808      83.54949     0.0000000E+00 0.0000000E+00  358.3554     001103\n" +
                            "   6.288721     -53.92545     0.0000000E+00 0.0000000E+00  13.98163     100004\n" +
                            "   15.86985      21.84057     0.0000000E+00 0.0000000E+00 -4.007687     010004\n" +
                            "  0.0000000E+00 0.0000000E+00  182.8132      184.6986     0.0000000E+00 001004\n" +
                            "  0.0000000E+00 0.0000000E+00  24534.14      15670.03     0.0000000E+00 000500\n" +
                            "   7188.361      1759.570     0.0000000E+00 0.0000000E+00  148.6158     000401\n" +
                            "  0.0000000E+00 0.0000000E+00  997.1366      312.2866     0.0000000E+00 000302\n" +
                            "  -49.60222      285.6261     0.0000000E+00 0.0000000E+00 -87.63576     000203\n" +
                            "  0.0000000E+00 0.0000000E+00  149.4465      185.8758     0.0000000E+00 000104\n" +
                            " -0.6575225     -3.579973     0.0000000E+00 0.0000000E+00  1.369766     000005"
            );
        }
    }

    @Run
    public void 前偏转段复习() {
        Elements elementsOfAllPart1 = getElementsOfAllPart1();

        Trajectory trajectoryPart1 = getTrajectoryPart1();

//        List<Point2> x = trackingIdealParticle(trajectoryPart1, trajectoryPart1.getLength(), elementsOfAllPart1, true);
        List<Point2> y = trackingIdealParticle(trajectoryPart1, trajectoryPart1.getLength(), elementsOfAllPart1, false);

        // 0.6mm   -0.8mm
//        Plot2d.plot2(mm2mmm(x));

        // 0mm  -0.7mm
        Plot2d.plot2(mm2mmm(y));

        Plot2d.showThread();
    }

    @Run(value = 1, validate = false)
    public void 二极cct磁场分布() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        Cct cct345_1 = getCct345_1();
        Cct cct345_2 = getCct345_2();

        Elements elements = Elements.of(cct345_1, cct345_2);

        List<Point2> bz = elements.magnetBzAlongTrajectory(trajectoryPart2);

        Plot2d.plot2(bz);

        Plot2d.showThread();
    }

    @Run(value = 2, validate = false)
    public void 二极cct跑跑看() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        Cct cct345_1 = getCct345_1();
        Cct cct345_2 = getCct345_2();

        Elements elements = Elements.of(cct345_1, cct345_2);

        List<Point3> track = trackingIdealParticle(trajectoryPart2, trajectoryPart2.getLength(), elements);

        Plot3d.plot3(track);

        elements.plot3d();

        Plot3d.setCube(8);

        Plot3d.offAxisAndBgColor();

        Plot3d.showThread();
    }

    @Run(value = 3, validate = false) // 72581ms //6738.987300872428
    public void 修改二极cct电流() {

        final double dipoleCct345IInner0 = dipoleCct345IInner;
        final double dipoleCct345IOuter0 = dipoleCct345IOuter;

        agCct345IInner = 0;
        agCct345IOuter = 0;

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        // 修改 a1 之前 -6738.991818271605, -6738.983348148148, 16
        // 修改之后
        List<Point2> point2List = BaseUtils.Python.linspaceStream(-6529.97193744856, -6529.971094650206, 16)
                .sequential()
                .mapToObj(k -> {
                    //System.out.println("k = " + k);

                    dipoleCct345IInner = k;
                    dipoleCct345IOuter = k;

                    Cct cct345_1 = getCct345_1();
                    Cct cct345_2 = getCct345_2();

                    Elements elements = Elements.of(cct345_1, cct345_2);

                    return BaseUtils.Content.BiContent.create(k, elements);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    Double i = bi.getT1();
                    Elements elements = bi.getT2();

                    RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectoryPart2);

                    ParticleRunner.run(ip, elements, trajectoryPart2.getLength(), MM);

                    Vector2 v = ip.getVelocity().toVector2();

                    Vector2 directAtEnd = trajectoryPart2.directAtEnd();

                    double radian = directAtEnd.angleToInRadian(v);//弧度制 取值范围 [0, pi]

                    double angle = BaseUtils.Converter.radianToAngle(radian); // 角度值

                    return BaseUtils.Content.BiContent.create(i, angle);
                }).collect(Collectors.toList())
                .stream()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
                    Double i = bi.getT1();
                    Double ang = bi.getT2();
                    System.out.println(i + " - " + ang);
                })
                .map(bi -> {
                    return Point2.create(bi.getT1(), bi.getT2());
                }).collect(Collectors.toList());

        Plot2d.plot2(point2List, Plot2d.BLUE_LINE);

        Plot2d.info("I", "Angle", "", 18);

        Plot2d.showThread();
    }

    @Run(value = 4, validate = false)
    public void 修改四极CCT电流() {
        dipoleCct345IInner = 0;
        dipoleCct345IOuter = 0;

        Cct cct345_1 = getCct345_1();

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        Line2 line2 = trajectoryPart2.resetLength(DL2 + CCT345_LENGTH + DL2);

        List<List<Point2>> multiplePoleMagnetAlongTrajectoryBreak = cct345_1.multiplePoleMagnetAlongTrajectoryBreak(
                line2, MM, 10 * MM, 2, 6);

        List<Point2> list = multiplePoleMagnetAlongTrajectoryBreak.get(1);

        Plot2d.plot2(list);

        Plot2d.showThread();
    }

    @Run(value = 5, validate = !false) // 188s
    public void 相椭圆() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        agCct345IInner = 8171;
        agCct345IOuter = 8171;

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        phase相椭圆画图(
                trajectoryPart2.getLength(),
                false, 0 * PRESENT,
                32, false, 1,
                elementsOfAllPart2, trajectoryPart2, 512, 5,
                List.of(
                        BaseUtils.Content.BiContent.create("Optics", COSY_MAP.part2Optics.map)
                )
        );
    }

    @Run(value = -6) // 0.25
    public void 调整二极CCT四极场() {
        Line2 line2 = getTrajectoryPart2().resetLength(DL2 + CCT345_LENGTH + DL2);

        agCct345IInner = 0;
        agCct345IOuter = 0;


        //    private double dipoleCct12A1Inner = Math.pow(dipoleCct12SmallRInner, 2) * 0.225;
        //    private double dipoleCct12A1Outer = -Math.pow(dipoleCct12SmallROuter, 2) * 0.225;


        String[] des = BaseUtils.Python.linspaceStream(0, 0.5, switcher.getSize())
                .sequential()
                .mapToObj(k -> {
                    dipoleCct345A1Inner = Math.pow(dipoleCct345SmallRInner, 2) * k;
                    dipoleCct345A1Outer = -Math.pow(dipoleCct345SmallROuter, 2) * k;

                    Cct cct345_1 = getCct345_1();

                    return BaseUtils.Content.BiContent.create(k, cct345_1);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    Cct cct = bi.getT2();

                    List<List<Point2>> multiplePoleMagnetAlongTrajectoryBreak =
                            cct.multiplePoleMagnetAlongTrajectoryBreak(line2, MM, 10 * MM, 1, 4);

                    List<Point2> g = multiplePoleMagnetAlongTrajectoryBreak.get(1);

                    return BaseUtils.Content.BiContent.create(bi.getT1(), g);
                })
                .collect(Collectors.toList())
                .stream()
                .sequential()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
                    List<Point2> t2 = bi.getT2();
                    Plot2d.plot2(t2, switcher.getAndSwitch());
                }).map(BaseUtils.Content.BiContent::getT1)
                .map(k -> "k=" + k)
                .collect(Collectors.toList())
                .toArray(String[]::new);

        Plot2d.info("s/m", "T/m", "二极CCT四极场", 18);

        Plot2d.legend(18, des);

        Plot2d.showThread();
    }

    @Run(value = -7) //
    public void 调整四极CCT偏转半径() {
        dipoleCct345IOuter = 0;
        dipoleCct345IInner = 0;

        final double agCct345BigR0 = agCct345BigR;

        Line2 line2 = getTrajectoryPart2().resetLength(DL2 + CCT345_LENGTH + DL2);

        List<String> des = BaseUtils.Python.linspaceStream(agCct345BigR0 + 0.5 * MM, agCct345BigR0 + 1.5 * MM, switcher.getSize())
                .sequential()
                .mapToObj(R -> {
                    agCct345BigR = R;
                    Cct cct = getCct345_1();

                    return BaseUtils.Content.BiContent.create(R, cct);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    Cct cct = bi.getT2();
                    Double r = bi.getT1();

                    List<Point2> bz = cct.magnetBzAlongTrajectory(line2);

                    return BaseUtils.Content.BiContent.create(r, bz);
                }).collect(Collectors.toList())
                .stream()
                .sequential()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
                    Plot2d.plot2(bi.getT2(), switcher.getAndSwitch());
                }).map(BaseUtils.Content.BiContent::getT1)
                .map(r -> "R=" + r)
                .collect(Collectors.toList());


        Plot2d.info("s/m", "T", "四极CCT二极场", 18);

        Plot2d.legend(18, des);

        Plot2d.showThread();

    }

    @Run(value = 8, validate = true)
    public void 磁场分布() {
        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        List<List<Point2>> m = elementsOfAllPart2.multiplePoleMagnetAlongTrajectoryBreak(
                trajectoryPart2, MM, 10 * MM, 3, 8
        );

        List<Point2> g = m.get(1);

        Plot2d.plot2(g);

        Plot2d.info("s/m", "T/m", "四极场", 18);

        Plot2d.showThread();
    }


    @Run(value = 9, validate = false) // 47s
    public void 单粒子跟踪() {
        agCct345IInner = 8171;
        agCct345IOuter = 8171;

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

//        agCct345IInner = 0;
//        agCct345IOuter = 0;
//
//        Cct cct345_1 = getCct345_1();
//        Cct cct345_2 = getCct345_2();
//
//        MagnetAble elementsOfAllPart2 = Elements.of(cct345_1, cct345_2);

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        List<Point2> list = trackingIdealParticle(trajectoryPart2, trajectoryPart2.getLength(), elementsOfAllPart2, false);

        List<Point2> x = mm2mmm(list);

        Plot2d.plot2(x);

//        Plot2d.info("s/m", "mm", "X方向-无四极磁铁&QS", 18);
        Plot2d.info("s/m", "mm", "Y方向", 18);
//        Plot2d.info("s/m","mm","Y方向",18);

        Plot2d.showThread();
    }

    @Run(value = 10, validate = false) // 出现偏差，可能是调整了 二极CCT 的 a1
    public void 无四极QS下参考粒子不能有偏() {
        agCct345IInner = 0;
        agCct345IOuter = 0;

        Cct cct345_1 = getCct345_1();
        Cct cct345_2 = getCct345_2();

        MagnetAble elementsOfAllPart2 = Elements.of(cct345_1, cct345_2);

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectoryPart2);

        List<Point3> run = ParticleRunner.run(ip, elementsOfAllPart2, trajectoryPart2.getLength(), MM);

        Vector2 v2 = ip.getVelocity().toVector2();

        Vector2 de = trajectoryPart2.directAtEnd();

        System.out.println("de = " + de);
        System.out.println("v2 = " + v2);

        double radian = de.angleToInRadian(v2);

        double angle = BaseUtils.Converter.radianToAngle(radian);

        System.out.println("angle = " + angle);
    }

    @Run(value = 11, validate = false)
    public void 不同二极CCT电流下单粒子() {

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        //-6529.971375582991
        List<String> des = BaseUtils.Python.linspaceStream(-6500, -6600, switcher.getSize())
                .sequential()
                .mapToObj(i -> {
                    dipoleCct345IInner = i;
                    dipoleCct345IOuter = i;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

                    return BaseUtils.Content.BiContent.create(i, elementsOfAllPart2);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    List<Point2> x = trackingIdealParticle(trajectoryPart2, trajectoryPart2.getLength(), bi.getT2(), true);
                    List<Point2> list = mm2mmm(x);
                    return BaseUtils.Content.BiContent.create(bi.getT1(), list);
                }).collect(Collectors.toList())
                .stream()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
                    Plot2d.plot2(bi.getT2(), switcher.getAndSwitch());
                }).map(BaseUtils.Content.BiContent::getT1)
                .map(i -> "i=" + i)
                .collect(Collectors.toList());


        Plot2d.info("s/x", "mm", "不同电流下参考粒子X方向位移", 18);

        Plot2d.legend(18, des);

        Plot2d.showThread();

    }


    @Run(value = 12, validate = false)
    public void 不同二极CCT电流下相椭圆() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        List<BaseUtils.Content.BiContent<Double, MagnetAble>> bis = BaseUtils.Python.linspaceStream(-6500, -6600, switcher.getSize() - 1)
                .sequential()
                .mapToObj(i -> {
                    dipoleCct345IInner = i;
                    dipoleCct345IOuter = i;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

                    return BaseUtils.Content.BiContent.create(i, elementsOfAllPart2);
                })
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .collect(Collectors.toList());

        BaseUtils.Content.BiContent<List<Double>, List<MagnetAble>> biContent = BaseUtils.Content.BiContent.collect(bis.stream());

        List<Double> is = biContent.getT1();
        List<MagnetAble> ms = biContent.getT2();

        phase相椭圆画图(
                trajectoryPart2.getLength(),
                true,
                0.0,
                16,
                false,
                1,
                biContent.createList(
                        is.stream().map(i -> "i=" + i).collect(Collectors.toList()),
                        ms
                ),
                trajectoryPart2,
                512,
                5,
                List.of(
                        BaseUtils.Content.BiContent.create("Optics", COSY_MAP.part2Optics.map)
                ),
                Arrays.asList(switcher.getObjs())
        );
    }

    @Run(value = -13) // 74s
    public void 不同四极CCT电流下单粒子() {

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        //    private double agCct345IInner = 7811; // 9799 // 2020年6月11日 *0.995
        //    private double agCct345IOuter = agCct345IInner;
        List<String> des = BaseUtils.Python.linspaceStream(7600, 8000, switcher.getSize())
                .sequential()
                .mapToObj(i -> {
                    agCct345IInner = i;
                    agCct345IOuter = i;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

                    return BaseUtils.Content.BiContent.create(i, elementsOfAllPart2);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    List<Point2> x = trackingIdealParticle(trajectoryPart2, trajectoryPart2.getLength(), bi.getT2(), true);
                    List<Point2> list = mm2mmm(x);
                    return BaseUtils.Content.BiContent.create(bi.getT1(), list);
                }).collect(Collectors.toList())
                .stream()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
                    Plot2d.plot2(bi.getT2(), switcher.getAndSwitch());
                }).map(BaseUtils.Content.BiContent::getT1)
                .map(i -> "i=" + i)
                .collect(Collectors.toList());


        Plot2d.info("s/x", "mm", "不同四极CCT电流下参考粒子X方向位移", 18);

        Plot2d.legend(18, des);

        Plot2d.showThread();

    }

    @Run(value = 15, validate = false)
    public void 不同四极CCT电流下相椭圆() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        //    private double agCct345IInner = 7811; // 9799 // 2020年6月11日 *0.995
        //    private double agCct345IOuter = agCct345IInner;

        List<BaseUtils.Content.BiContent<Double, MagnetAble>> bis = BaseUtils.Python.linspaceStream(8000, 8300, switcher.getSize() - 1)
                .sequential()
                .mapToObj(i -> {
                    agCct345IInner = i;
                    agCct345IOuter = i;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

                    return BaseUtils.Content.BiContent.create(i, elementsOfAllPart2);
                })
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .collect(Collectors.toList());

        BaseUtils.Content.BiContent<List<Double>, List<MagnetAble>> biContent = BaseUtils.Content.BiContent.collect(bis.stream());

        List<Double> is = biContent.getT1();
        List<MagnetAble> ms = biContent.getT2();

        phase相椭圆画图(
                trajectoryPart2.getLength(),
                true,
                0.0,
                16,
                false,
                1,
                biContent.createList(
                        is.stream().map(i -> "i=" + i).collect(Collectors.toList()),
                        ms
                ),
                trajectoryPart2,
                512,
                5,
                List.of(
                        BaseUtils.Content.BiContent.create("Optics", COSY_MAP.part2Optics.map)
                ),
                Arrays.asList(switcher.getObjs())
        );
    }

    @Run(16) // 512s
    public void 不同动量分散下相椭圆() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        List<String> des = List.of(-7, -5, -2, 0, 3, 6, 9).stream().mapToDouble(n -> n * PRESENT)
                .sequential()
                .mapToObj(delta -> {
                    List<Point2> x1 = tracking相椭圆(
                            trajectoryPart2.getLength(),
                            false,
                            delta,
                            16,
                            false,
                            1,
                            elementsOfAllPart2, trajectoryPart2
                    );

                    return BaseUtils.Content.BiContent.create(delta, x1);
                })
                .peek(bi -> {
                    Plot2d.plot2circle(bi.getT2(), switcher.getAndSwitch());
                })
                .mapToDouble(BaseUtils.Content.BiContent::getT1)
                .mapToInt(d -> (int) Math.round(d / PRESENT))
                .mapToObj(d -> "delta=" + d + "%")
                .collect(Collectors.toList());


        Plot2d.info("y/mm", "yp/mrad", "y-plane", 18);
//        Plot2d.info("x/mm", "xp/mrad", "x-plane", 18);

        Plot2d.legend(18, des);

        Plot2d.equal();

        Plot2d.showThread();

    }


    //-------------------优化-----------------
    @Run(99) // 跑一跑.ok
    public void 不同动量分散下相椭圆ApiTest() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        CctUtils.multiDpPhaseEllipsesAndPlot(
                trajectoryPart2, trajectoryPart2.getLength(),
                elementsOfAllPart2,
                -13 * PRESENT, -10 * PRESENT, 3, 16, true
        );
    }


    @Run(100) // 794329ms
    public void 研究画图dp_束斑大小() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        final double DP_MAX = 10 * PRESENT;
        final double DP_MIN = -10 * PRESENT;
        final int number = 16;
        final boolean xPlane = false;

        List<BaseUtils.Content.BiContent<Double, List<Point2>>> biContentList = CctUtils.multiDpPhaseEllipses(
                trajectoryPart2, trajectoryPart2.getLength(),
                elementsOfAllPart2, DP_MIN, DP_MAX, 10, 16, xPlane
        );

        List<Point2> dp2x = BaseUtils.Content.BiContent.map(biContentList, x -> x / PRESENT, point2s ->
                point2s.stream().mapToDouble(Point2::getX).max().orElseThrow() -
                        point2s.stream().mapToDouble(Point2::getX).min().orElseThrow())
                .stream()
                .peek(bi -> bi.setT2If(x -> x >= 20., 20.))
                .map(bi -> BaseUtils.Content.BiContent.doubleDoubleBiContentToPoint2(bi))
                .collect(Collectors.toList());


        Logger.getLogger().info("dp2x = " + dp2x);

        Plot2d.plot2(dp2x);

        if (xPlane) {
            Plot2d.info("dp/%", "x-size/mm", "dp-x方向束斑", 18);
        } else {
            Plot2d.info("dp/%", "y-size/mm", "dp-y方向束斑", 18);
        }

        Plot2d.showThread();
    }

    @Run(-101) // 跑一跑.ok 60
    public void 不同动量分散下粒子轨迹() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        List<List<Point2>> x = CctUtils.trackMultiParticles2d(8, -12 * PRESENT, trajectoryPart2, trajectoryPart2.getLength(), elementsOfAllPart2, true);

        x.forEach(Plot2d::plot2);

        Plot2d.showThread();
    }

    @Run(103) // 794329ms
    public void 研究画图dp_束斑中心图() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

        final double DP_MAX = 5 * PRESENT;
        final double DP_MIN = -10 * PRESENT;
        final int number = 16;
        final boolean xPlane = true;

        List<BaseUtils.Content.BiContent<Double, List<Point2>>> biContentList = CctUtils.multiDpPhaseEllipses(
                trajectoryPart2, trajectoryPart2.getLength(),
                elementsOfAllPart2, DP_MIN, DP_MAX, 10, 16, xPlane
        );

        List<Point2> dp2x = BaseUtils.Content.BiContent.map(biContentList, x -> x / PRESENT, point2s ->
                point2s.stream().mapToDouble(Point2::getX).average().orElseThrow()
        )
                .stream().map(bi -> BaseUtils.Content.BiContent.doubleDoubleBiContentToPoint2(bi))
                .collect(Collectors.toList());


        Logger.getLogger().info("dp2x = " + dp2x);

        Plot2d.plot2(dp2x);

        if (xPlane) {
            Plot2d.info("dp/%", "x-center/mm", "dp-x方向中心", 18);
        } else {
            Plot2d.info("dp/%", "y-center/mm", "dp-y方向中心", 18);
        }

        Plot2d.showThread();
    }


    @Run(110) // 3166741ms
    public void 不同四极CCT电流不同动量分散下束斑大小图() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        BaseUtils.Switcher<String> sw = CctUtils.createPlotDescribeSwitcher();

        final double DP_MAX = 10 * PRESENT;
        final double DP_MIN = -10 * PRESENT;
        final boolean xPlane = true;


        List<String> des = BaseUtils.Python.linspaceStream(8531, 7811, 5)
                .sequential()
                .mapToObj(i -> {

                    agCct345IInner = i;
                    agCct345IOuter = i;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();


                    List<BaseUtils.Content.BiContent<Double, List<Point2>>> biContentList = CctUtils.multiDpPhaseEllipses(
                            trajectoryPart2, trajectoryPart2.getLength(),
                            elementsOfAllPart2, DP_MIN, DP_MAX, 8, 16, xPlane
                    );

                    List<Point2> dp2x = BaseUtils.Content.BiContent.map(biContentList, x -> x / PRESENT, point2s ->
                            point2s.stream().mapToDouble(Point2::getX).max().orElseThrow() -
                                    point2s.stream().mapToDouble(Point2::getX).min().orElseThrow())
                            .stream()
                            .peek(bi -> bi.setT2If(x -> x >= 15., 15.))
                            .map(bi -> BaseUtils.Content.BiContent.doubleDoubleBiContentToPoint2(bi))
                            .collect(Collectors.toList());

                    Plot2d.plot2(dp2x, sw.getAndSwitch());

                    return "I = " + ((int) Math.round(i)) + "A";
                }).collect(Collectors.toList());

        if (xPlane) {
            Plot2d.info("dp/%", "x-size/mm", "不同四极CCT电流下 dp-x方向束斑", 18);
        } else {
            Plot2d.info("dp/%", "y-size/mm", "不同四极CCT电流下 dp-y方向束斑", 18);
        }

        Plot2d.legend(18, des);

        Plot2d.showThread();
    }

    @Run(120)
    public void 不同六极场分量大小对相椭圆影响() {
        //private double QS3_SECOND_GRADIENT = -87.25 * 2.0 / 2.0; //T m-2

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        boolean xPlane = true;

        List<String> des = BaseUtils.Python.linspaceStream(-100, 100, switcher.getSize())
                .mapToObj(qs3 -> {
                    QS3_SECOND_GRADIENT = qs3;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

                    List<Point2> list = CctUtils.trackingPhaseEllipse(trajectoryPart2.getLength(),
                            xPlane, -7 * PRESENT, 16, false,
                            1, elementsOfAllPart2, trajectoryPart2);

                    Plot2d.plot2circle(list, switcher.getAndSwitch());

                    return "QS3-S =" + ((int) Math.round(qs3)) + "T/m2";
                }).collect(Collectors.toList());

        if (xPlane)
            Plot2d.info("x/mm", "xp/mrad", "不同QS3六极场梯度", 18);
        else
            Plot2d.info("y/mm", "yp/mrad", "不同QS3六极场梯度", 18);


        Plot2d.legend(18, des);

        Plot2d.showThread();
    }

    @Run(121)
    public void 不同QS3四极极场分量大小对相椭圆影响() {
        //  private double QS3_GRADIENT = -11.78; //T m-1
        //private double QS3_SECOND_GRADIENT = -87.25 * 2.0 / 2.0; //T m-2

        Trajectory trajectoryPart2 = getTrajectoryPart2();

        boolean xPlane = false;

        List<String> des = BaseUtils.Python.linspaceStream(-20, 0, switcher.getSize())
                .mapToObj(qs3 -> {
                    QS3_GRADIENT = qs3;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();

                    List<Point2> list = CctUtils.trackingPhaseEllipse(trajectoryPart2.getLength(),
                            xPlane, -7* PRESENT, 16, false,
                            1, elementsOfAllPart2, trajectoryPart2);

                    Plot2d.plot2circle(list, switcher.getAndSwitch());

                    return "QS3-Q =" + ((int) Math.round(qs3)) + "T/m";
                }).collect(Collectors.toList());

        if (xPlane)
            Plot2d.info("x/mm", "xp/mrad", "不同QS3四极场梯度", 18);
        else
            Plot2d.info("y/mm", "yp/mrad", "不同QS3四极场梯度", 18);


        Plot2d.equal();


        Plot2d.legend(18, des);

        Plot2d.showThread();
    }

    @Run(-130) // 3166 741ms // 运行时间： 6505 514ms
    public void 不同QS3六极场不同动量分散下束斑大小图() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        BaseUtils.Switcher<String> sw = CctUtils.createPlotDescribeSwitcher();

        final double DP_MAX = 10 * PRESENT;
        final double DP_MIN = -10 * PRESENT;
        final boolean xPlane = false;

        //private double QS3_SECOND_GRADIENT = -87.25 * 2.0 / 2.0; //T m-2

        List<String> des = BaseUtils.Python.linspaceStream(-200, 100, 5)
                .sequential()
                .mapToObj(qs3 -> {

                    QS3_SECOND_GRADIENT = qs3;

                    MagnetAble elementsOfAllPart2 = getElementsOfAllPart2();


                    List<BaseUtils.Content.BiContent<Double, List<Point2>>> biContentList = CctUtils.multiDpPhaseEllipses(
                            trajectoryPart2, trajectoryPart2.getLength(),
                            elementsOfAllPart2, DP_MIN, DP_MAX, 16, 16, xPlane
                    );

                    List<Point2> dp2x = BaseUtils.Content.BiContent.map(biContentList, x -> x / PRESENT, point2s ->
                            point2s.stream().mapToDouble(Point2::getX).max().orElseThrow() -
                                    point2s.stream().mapToDouble(Point2::getX).min().orElseThrow())
                            .stream()
                            .peek(bi -> bi.setT2If(x -> x >= 15., 15.))
                            .map(bi -> BaseUtils.Content.BiContent.doubleDoubleBiContentToPoint2(bi))
                            .collect(Collectors.toList());

                    Plot2d.plot2(dp2x, sw.getAndSwitch());

                    return "QS3_S= " + ((int) Math.round(qs3)) + "T/m-2";
                }).collect(Collectors.toList());

        if (xPlane) {
            Plot2d.info("dp/%", "x-size/mm", "不同QS3六极场下 dp-x方向束斑", 18);
        } else {
            Plot2d.info("dp/%", "y-size/mm", "不同QS3六极场下 dp-y方向束斑", 18);
        }

        Plot2d.legend(18, des);

        Plot2d.showThread();
    }

    @Run(value = 1000,validate = false)
    public void 前偏转段的关键() {
//        agCct12BigR = 0.95;
//
//        dipoleCct12A1Inner= 0;
//        dipoleCct12A1Outer= 0;

        Elements elementsOfAllPart1 = getElementsOfAllPart1();

        Trajectory trajectoryPart1 = getTrajectoryPart1();

        CctUtils.analysePhaseEllipseAndPlot(
                trajectoryPart1.getLength(),
                true, 9 * PRESENT, 16,
                true, 1,
                elementsOfAllPart1, trajectoryPart1,
                512, 5,
                List.of(BaseUtils.Content.BiContent.create("Optics", COSY_MAP.part1Optics.map))
        );
    }

    @Run(value = 1001, validate = false) // k=0.25
    public void 消除二极CCT四极场前后相椭圆实际变化() {

        Line2 line2 = getTrajectoryPart1();//.resetLength(DL1 + CCT12_LENGTH + GAP1);


        //    private double dipoleCct12A1Inner = Math.pow(dipoleCct12SmallRInner, 2) * 0.225;
        //    private double dipoleCct12A1Outer = -Math.pow(dipoleCct12SmallROuter, 2) * 0.225;

//        agCct12IOuter = 0;
//        agCct12IInner = 0;
//
//        QS1_GRADIENT = 0;
//        QS2_GRADIENT = 0;

        String[] des = BaseUtils.Python.linspaceStream(0, 0.5, 5)
                .sequential()
                .mapToObj(k -> {
                    dipoleCct12A1Inner = Math.pow(dipoleCct12SmallRInner, 2) * k;
                    dipoleCct12A1Outer = -Math.pow(dipoleCct12SmallROuter, 2) * k;

                    Elements elementsOfAllPart1 = getElementsOfAllPart1();

                    return BaseUtils.Content.BiContent.create(k, elementsOfAllPart1);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    Elements elements = bi.getT2();

                    List<Point2> phaseEllipse = CctUtils.trackingPhaseEllipse(line2.getLength(), true,
                            0, 16, false, 1, elements, line2);

//                    List<List<Point2>> multiplePoleMagnetAlongTrajectoryBreak =
//                            elements.multiplePoleMagnetAlongTrajectoryBreak(line2, MM, 10 * MM, 1, 4);
//
//                    List<Point2> g = multiplePoleMagnetAlongTrajectoryBreak.get(1);

                    return BaseUtils.Content.BiContent.create(bi.getT1(), phaseEllipse);
                })
                .collect(Collectors.toList())
                .stream()
                .sequential()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
                    List<Point2> t2 = bi.getT2();
                    Plot2d.plot2circle(t2, switcher.getAndSwitch());
//                    Plot2d.plot2(t2, switcher.getAndSwitch());
                }).map(BaseUtils.Content.BiContent::getT1)
                .map(k -> "k=" + k)
                .collect(Collectors.toList())
                .toArray(String[]::new);

        Plot2d.info("x/mm", "y/mrad", "二极CCT四极场-相椭圆", 18);
//        Plot2d.info("s/m", "T/m", "二极CCT四极场", 18);

        List<Point2> cosyPhaseEllipse = CctUtils.cosyPhaseEllipse(true, 0, 512, 5, false, 1, COSY_MAP.part1Optics.map);

        Plot2d.plot2circle(cosyPhaseEllipse, switcher.getAndSwitch());

        des = BaseUtils.ArrayUtils.append(des, "OPTICS");

        Plot2d.legend(18, des);

        Plot2d.showThread();
    }

    @Run(value = 1002, validate = false) // 950mm + 0.1875mm
    public void 调整四极CCT偏转半径前后相椭圆实际变化() {
//        dipoleCct12IOuter = 0;
//        dipoleCct12IInner = 0;

        final double agCct12BigR0 = 0.95;

        Line2 line2 = getTrajectoryPart1();//.resetLength(DL1 + CCT12_LENGTH + GAP1);

        List<String> des = BaseUtils.Python.linspaceStream(agCct12BigR0 - 0. * MM, agCct12BigR0 + 0.3 * MM, 5)
                .sequential()
                .mapToObj(R -> {
                    agCct12BigR = R;
                    Elements cct = getElementsOfAllPart1();

                    return BaseUtils.Content.BiContent.create(R, cct);
                }).collect(Collectors.toList())
                .stream()
                .parallel()
                .map(bi -> {
                    Elements cct = bi.getT2();
                    Double r = bi.getT1();
//
//                    List<Point2> bz = cct.magnetBzAlongTrajectory(line2);

                    List<Point2> phaseEllipse = CctUtils.trackingPhaseEllipse(line2.getLength(), true,
                            0, 16, false, 1, cct, line2);


                    return BaseUtils.Content.BiContent.create(r, phaseEllipse);
                }).collect(Collectors.toList())
                .stream()
                .sequential()
                .sorted(Comparator.comparingDouble(BaseUtils.Content.BiContent::getT1))
                .peek(bi -> {
//                    Plot2d.plot2(bi.getT2(), switcher.getAndSwitch());
                    Plot2d.plot2circle(bi.getT2(), switcher.getAndSwitch());
                }).map(BaseUtils.Content.BiContent::getT1)
                .map(r -> "R=" + Math.round(r * 10e7) / 10e7)
                .collect(Collectors.toList());


        List<Point2> cosyPhaseEllipse = CctUtils.cosyPhaseEllipse(true, 0, 512, 5, false, 1, COSY_MAP.part1Optics.map);

        Plot2d.plot2circle(cosyPhaseEllipse, Plot2d.BLUE_LINE);


        List<String> optics = BaseUtils.ListUtils.append(des, "OPTICS");

        Plot2d.info("s/m", "T", "四极CCT二极场", 18);

        Plot2d.legend(18, optics);

        Plot2d.showThread();

    }

    // ------------------- method ----------------
    private void phase相椭圆画图(
            double distance, boolean xPlane, double delta, int numberParticleForTrack,
            boolean moveToCenter, double scaleForParticle,
            MagnetAble magnetAble, Line2 trajectory,
            int numberParticleForCosyMap, int cosyOrder,
            List<BaseUtils.Content.BiContent<String, CosyArbitraryOrder.CosyMapArbitraryOrder>> mapInfo
    ) {
        CosyArbitraryOrder.CosyMapArbitraryOrder[] maps = mapInfo.stream().map(BaseUtils.Content.
                BiContent::getT2).collect(Collectors.toList()).toArray(CosyArbitraryOrder.CosyMapArbitraryOrder[]::new);

        List<List<Point2>> lists = phase相椭圆研究(distance, xPlane, delta, numberParticleForTrack, moveToCenter,
                scaleForParticle, magnetAble, trajectory, numberParticleForCosyMap, cosyOrder, maps);

        List<Point2> list = lists.get(0);
        Plot2d.plot2(list, Plot2d.BLACK_POINT);

        for (int i = 1; i < lists.size(); i++) {
            List<Point2> list1 = lists.get(i);
            Plot2d.plot2(list1, switcher.getAndSwitch());
        }

        if (xPlane)
            Plot2d.info("x/mm", "xp/mrad", "x/xp dp=" + delta / PRESENT + "%, s=" + distance + "m", 18);
        else
            Plot2d.info("y/mm", "yp/mrad", "y/yp dp=" + delta / PRESENT + "%, s=" + distance + "m", 18);

        List<String> info = mapInfo.stream().map(BaseUtils.Content.BiContent::getT1).collect(Collectors.toList());
        info.add(0, "Track");

        Plot2d.legend(18, info.toArray(String[]::new));

        Plot2d.equal();

        Plot2d.showThread();
    }

    private void phase相椭圆画图(
            double distance, boolean xPlane, double delta, int numberParticleForTrack,
            boolean moveToCenter, double scaleForParticle,
            List<BaseUtils.Content.BiContent<String, MagnetAble>> magnetAblenfo, Line2 trajectory,
            int numberParticleForCosyMap, int cosyOrder,
            List<BaseUtils.Content.BiContent<String, CosyArbitraryOrder.CosyMapArbitraryOrder>> mapInfo, List<String> describes
    ) {
        List<CosyArbitraryOrder.CosyMapArbitraryOrder> maps = mapInfo.stream().map(BaseUtils.Content.
                BiContent::getT2).collect(Collectors.toList());

        List<MagnetAble> magnetAbles = magnetAblenfo.stream().map(BaseUtils.Content.BiContent::getT2).collect(Collectors.toList());

        List<List<Point2>> lists = phase相椭圆研究(distance, xPlane, delta, numberParticleForTrack, moveToCenter,
                scaleForParticle, magnetAbles, trajectory, numberParticleForCosyMap, cosyOrder, maps);

        for (int i = 0; i < lists.size(); i++) {
            List<Point2> list1 = lists.get(i);
            Plot2d.plot2circle(list1, describes.get(i));
        }

        if (xPlane)
            Plot2d.info("x/mm", "xp/mrad", "x/xp dp=" + delta / PRESENT + "%, s=" + distance + "m", 18);
        else
            Plot2d.info("y/mm", "yp/mrad", "y/yp dp=" + delta / PRESENT + "%, s=" + distance + "m", 18);

        Stream<String> trakcinfo = magnetAblenfo.stream().map(BaseUtils.Content.BiContent::getT1).collect(Collectors.toList()).stream();
        Stream<String> mapinfo = mapInfo.stream().map(BaseUtils.Content.BiContent::getT1).collect(Collectors.toList()).stream();

        String[] le = Stream.concat(trakcinfo, mapinfo).collect(Collectors.toList()).toArray(String[]::new);

        Plot2d.legend(18, le);

        Plot2d.equal();

        Plot2d.showThread();
    }

    private List<List<Point2>> phase相椭圆研究(
            double distance, boolean xPlane, double delta, int numberParticleForTrack,
            boolean moveToCenter, double scaleForParticle,
            MagnetAble magnetAble, Line2 trajectory,
            int numberParticleForCosyMap, int cosyOrder, CosyArbitraryOrder.CosyMapArbitraryOrder... maps
    ) {
        List<List<Point2>> ret = new ArrayList<>(1 + maps.length);

        ret.add(
                tracking相椭圆(distance, xPlane, delta, numberParticleForTrack, moveToCenter, scaleForParticle, magnetAble, trajectory)
        );

        for (CosyArbitraryOrder.CosyMapArbitraryOrder map : maps) {
            ret.add(
                    cosy相椭圆(xPlane, delta, numberParticleForCosyMap, cosyOrder, moveToCenter, scaleForParticle, map)
            );
        }

        return ret;
    }

    private List<List<Point2>> phase相椭圆研究(
            double distance, boolean xPlane, double delta, int numberParticleForTrack,
            boolean moveToCenter, double scaleForParticle,
            List<MagnetAble> magnetAbles, Line2 trajectory,
            int numberParticleForCosyMap, int cosyOrder, List<CosyArbitraryOrder.CosyMapArbitraryOrder> maps
    ) {
        List<List<Point2>> ret = new ArrayList<>(magnetAbles.size() + maps.size());


        for (MagnetAble magnetAble : magnetAbles) {
            ret.add(
                    tracking相椭圆(distance, xPlane, delta, numberParticleForTrack, moveToCenter, scaleForParticle, magnetAble, trajectory)
            );
        }


        for (CosyArbitraryOrder.CosyMapArbitraryOrder map : maps) {
            ret.add(
                    cosy相椭圆(xPlane, delta, numberParticleForCosyMap, cosyOrder, moveToCenter, scaleForParticle, map)
            );
        }

        return ret;
    }


    private List<Point2> cosy相椭圆(
            boolean xPlane, double delta, int number, int order,
            boolean moveToCenter, double scaleForParticle,
            CosyArbitraryOrder.CosyMapArbitraryOrder map
    ) {

        /*----------------COSY-----------------*/

        // 相空间点
        List<PhaseSpaceParticle> pp = PhaseSpaceParticles.phaseSpaceParticlesAlongPositiveEllipseInPlane(
                xPlane, 3.5 * MM * scaleForParticle, 7.5 * MM * scaleForParticle, delta, number);

        // 转为COSY能量分散
        pp = PhaseSpaceParticles.convertDeltaFromMomentumDispersionToEnergyDispersion(pp, 250);

        // 运行
        List<PhaseSpaceParticle> ppEnd = map.apply(pp, order);

        // 投影
        List<Point2> projectionToPlaneCOSY = PhaseSpaceParticles.projectionToPlane(xPlane, ppEnd);

        if (moveToCenter) {
            Vector2 average = Point2.average(projectionToPlaneCOSY).toVector2().reverseSelf();

            projectionToPlaneCOSY.forEach(point2 -> point2.moveSelf(average));
        }

        // 改单位
        return Point2.convert(projectionToPlaneCOSY, 1 / MM, 1 / MRAD);
    }

    private List<Point2> tracking相椭圆(
            double distance, boolean xPlane, double delta, int number,
            boolean moveToCenter, double scaleForParticle,
            MagnetAble magnetAble, Line2 trajectory) {

        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory);

        List<PhaseSpaceParticle> pp = PhaseSpaceParticles.phaseSpaceParticlesAlongPositiveEllipseInPlane(
                xPlane, 3.5 * MM * scaleForParticle, 7.5 * MM * scaleForParticle, delta, number);

        List<RunningParticle> ps = ParticleFactory.createParticlesFromPhaseSpaceParticle(ip, ip.computeNaturalCoordinateSystem(), pp);

        if (distance > MM) {
            ParticleRunner.runThread(ps, magnetAble, distance, MM);
            //ParticleRunner.run(ip, magnetAble, distance, MM);
        }

        RunningParticle ipEnd = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory, distance);

        List<PhaseSpaceParticle> ppEnd = PhaseSpaceParticles.phaseSpaceParticlesFromRunningParticles(
                ipEnd, ipEnd.computeNaturalCoordinateSystem(), ps);

        List<Point2> projectionToPlaneCOSY = PhaseSpaceParticles.projectionToPlane(xPlane, ppEnd);

        if (moveToCenter) {
            Vector2 average = Point2.average(projectionToPlaneCOSY).toVector2().reverseSelf();

            projectionToPlaneCOSY.forEach(point2 -> point2.moveSelf(average));
        }

        // 改单位
        return Point2.convert(projectionToPlaneCOSY, 1 / MM, 1 / MRAD);
    }


    private List<Point2> trackingIdealParticle(
            Line2 trajectory, double distance, MagnetAble magnetAble, boolean xPlane) {
        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory);

        return ParticleRunner.runGetPoint3WithDistance(ip, magnetAble, distance, MM)
                .stream()
                .map(point3WithDistance -> {

                    if (xPlane) {
                        double d = point3WithDistance.getDistance();

                        Point2 p = point3WithDistance.getPoint3().toPoint2();

                        Point2 o = trajectory.pointAt(d);
                        Vector2 x = trajectory.directAt(d).rotateSelf(Math.PI / 2);

                        return Point2.create(d, Vector2.from(o).to(p).dot(x));


                    } else {
                        return point3WithDistance.getDistanceWithZ();
                    }
                }).collect(Collectors.toList());
    }

    private List<Point3> trackingIdealParticle(Line2 trajectory, double distance, MagnetAble magnetAble) {
        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory);
        return ParticleRunner.run(ip, magnetAble, distance, MM);
    }

    // 单位 m-m
    private List<List<Point2>> track多粒子(int number, double delta, Line2 trajectory, double distance,
                                        MagnetAble magnetAble, boolean xPlane) {
        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory);

//        List<PhaseSpaceParticle> pp = PhaseSpaceParticles.phaseSpaceParticlesAlongPositiveEllipseInPlane(
//                xPlane, 3.5 * MM, 7.5 * MM, delta, number);
//        List<RunningParticle> ps = ParticleFactory.createParticlesFromPhaseSpaceParticle(ip, ip.computeNaturalCoordinateSystem(), pp);


        List<RunningParticle> ps = Arrays.stream(SR.sphericalUniformDistribution(number)).map(point3 -> {

            PhaseSpaceParticle psp = PhaseSpaceParticle.create(
                    xPlane ? 3.5 * MM * point3.x : 0,
                    xPlane ? 7.5 * MM * point3.y : 0,
                    xPlane ? 0 : 3.5 * MM * point3.x,
                    xPlane ? 0 : 7.5 * MM * point3.y,
                    0,
                    delta * point3.z
            );

            return ParticleFactory.createParticleFromPhaseSpaceParticle(ip, ip.computeNaturalCoordinateSystem(), psp);
        }).collect(Collectors.toList());


        return ps.stream().parallel().map(p ->
                ParticleRunner.runGetPoint3WithDistance(p, magnetAble, distance, MM)
                        .stream()
                        .map(point3WithDistance -> {
                            if (xPlane) {
                                double d = point3WithDistance.getDistance();

                                Point2 p2 = point3WithDistance.getPoint3().toPoint2();

                                Point2 o = trajectory.pointAt(d);
                                Vector2 x = trajectory.directAt(d).rotateSelf(Math.PI / 2);

                                return Point2.create(d, Vector2.from(o).to(p2).dot(x));
                            } else {
                                return point3WithDistance.getDistanceWithZ();
                            }
                        })
                        .collect(Collectors.toList())
        ).collect(Collectors.toList());
    }

    private List<List<Point3>> track多粒子3d(int number, double delta, Line2 trajectory,
                                          double distance, MagnetAble magnetAble, boolean xPlane) {
        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory);

//        List<PhaseSpaceParticle> pp = PhaseSpaceParticles.phaseSpaceParticlesAlongPositiveEllipseInPlane(
//                xPlane, 3.5 * MM, 7.5 * MM, delta, number);
//        List<RunningParticle> ps = ParticleFactory.createParticlesFromPhaseSpaceParticle(ip, ip.computeNaturalCoordinateSystem(), pp);


        List<RunningParticle> ps = Arrays.stream(SR.sphericalUniformDistribution(number)).map(point3 -> {

            PhaseSpaceParticle psp = PhaseSpaceParticle.create(
                    xPlane ? 3.5 * MM * point3.x : 0,
                    xPlane ? 7.5 * MM * point3.y : 0,
                    xPlane ? 0 : 3.5 * MM * point3.x,
                    xPlane ? 0 : 7.5 * MM * point3.y,
                    0,
                    delta * point3.z
            );

            return ParticleFactory.createParticleFromPhaseSpaceParticle(ip, ip.computeNaturalCoordinateSystem(), psp);
        }).collect(Collectors.toList());


        return ps.stream().parallel().map(p -> ParticleRunner.run(p, magnetAble, distance, MM)).collect(Collectors.toList());
    }


    // 画图时 单位转为 m-mm
    private void track多粒子并画图(int number, double delta, Line2 trajectory, double distance,
                             MagnetAble magnetAble, boolean xPlane) {
        List<List<Point2>> xs = track多粒子(number, delta, trajectory, distance, magnetAble, xPlane);

        xs.stream().map(x -> Point2.convert(x, 1, 1 / MM))
                .forEach(x -> Plot2d.plot2(x, Plot2d.BLUE_LINE));

        Plot2d.info("m", "mm", (xPlane ? "x-plane" : "y-plane") + " dp=" + delta / PRESENT + "%", 18);

        Plot2d.showThread();
    }

    // 单位 mm/%
    private List<Point2> track色散(Line2 trajectory, MagnetAble magnetAble) {
        double length = trajectory.getLength() + 0.1;

        List<RunningParticle> particles = BaseUtils.Python.linspaceStream(-5 * PRESENT, 5 * PRESENT, 2)
                .mapToObj(delta -> {
                    double k = Protons.getKineticEnergy_MeV_AfterMomentumDispersion(250., delta);
                    RunningParticle ipk = ParticleFactory.createIdealProtonAtTrajectory(trajectory, k);
                    return ipk;
                })
                .collect(Collectors.toList());

        PolynomialFitter fitter = PolynomialFitter.build(1);

        List<Point2> distance_R16 = IntStream.range(0, (int) (length / MM) + 1)
                .mapToObj(i -> {
                    double distance = particles.get(0).getDistance();
                    RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory, distance);
                    List<Point2> delta_x = particles
                            .stream()
                            .map(p -> PhaseSpaceParticles.phaseSpaceParticleFromRunningParticle(ip, ip.computeNaturalCoordinateSystem(), p))
                            .map(pp -> Point2.create(pp.getDelta(), pp.getX()))
                            .sorted(Comparator.comparingDouble(Point2::getX))
                            .collect(Collectors.toList());
                    double[] fit = fitter.fit(delta_x);


                    particles.forEach(p -> p.runSelf(magnetAble.magnetAt(p.position), MM));

                    return Point2.create(distance, fit[1]);
                })
                .map(p -> Point2.convert(p, 1, 1 / MM * PRESENT))
                .collect(Collectors.toList());

        return distance_R16;
    }

    // 单位 mm/%
    private List<Point2> cosy色散(List<BaseUtils.Content.BiContent<Double,
            CosyArbitraryOrder.CosyMapArbitraryOrder>> distance_cosyMap) {
        return distance_cosyMap.stream()
                .map(bi -> {
                    Double d = bi.getT1();
                    CosyArbitraryOrder.CosyMapArbitraryOrder m = bi.getT2();

                    double r16Cosy = m.getR(1, 6);

                    double r16Trans = COSY.convertR16InCosyToTransportPronTonOnly(r16Cosy, 250);

                    return Point2.create(d, r16Trans);
                })
                .collect(Collectors.toList());
    }


    /**
     * 神方法
     *
     * @param dependentVariable   应变量
     * @param independentVariable 自变量
     * @param xMin                自变量最小值
     * @param xMax                自变量最大值
     * @param number              分点数目
     * @param trajectory          轨迹
     * @param distance            粒子运动距离
     * @param magnetAble          磁场
     * @return 函数关系 y=f(x)
     */
    private List<Point2> trackFunction(
            PhaseSpaceParticle.VARIABLE dependentVariable,
            PhaseSpaceParticle.VARIABLE independentVariable,
            double xMin, double xMax, int number,
            Line2 trajectory,
            double distance,
            MagnetAble magnetAble
    ) {
        RunningParticle ip = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory);
        RunningParticle ipEnd = ParticleFactory.createIdealProtonAtTrajectory250MeV(trajectory, distance);
        PhaseSpaceParticle origin = PhaseSpaceParticle.origin();

        return BaseUtils.Python.linspaceStream(xMin, xMax, number)
                .mapToObj(x -> {
                    PhaseSpaceParticle p = origin.copy();
                    p.set(independentVariable, x);
                    RunningParticle pp = ParticleFactory.createParticleFromPhaseSpaceParticle(ip,
                            ip.computeNaturalCoordinateSystem(), p);
                    return BaseUtils.Content.BiContent.create(x, pp);
                })
                .collect(Collectors.toList())
                .stream().parallel()
                .map(bi -> {
                    Double x = bi.getT1();
                    RunningParticle p = bi.getT2();
                    ParticleRunner.run(p, magnetAble, distance, MM);
                    PhaseSpaceParticle ppEnd = PhaseSpaceParticles.phaseSpaceParticleFromRunningParticle(
                            ipEnd, ipEnd.computeNaturalCoordinateSystem(), p);
                    double y = ppEnd.get(dependentVariable);
                    return Point2.create(x, y);
                })
                .collect(Collectors.toList())
                .stream()
                .sorted(Point2::compareTo)
                .collect(Collectors.toList());
    }

    private List<Point2> mm2mmm(List<Point2> mm) {
        return Point2.convert(mm, 1, 1 / MM);
    }

    // ---------- element --------------

    private Trajectory getTrajectoryPart2() {
        Trajectory trajectoryPart1 = getTrajectoryPart1();

        return TrajectoryFactory.setStartingPoint(trajectoryPart1.pointAtEnd())
                .setStraightLine(DL2, trajectoryPart1.directAtEnd())
                .addArcLine(trajectoryBigRPart2, true, dipoleCct345Angle)
                .addStraitLine(GAP3 + QS3_LEN + GAP3)
                .addArcLine(trajectoryBigRPart2, true, dipoleCct345Angle)
                .addStraitLine(DL2);
    }

    private Trajectory getTrajectoryPart1() {
        return TrajectoryFactory.setStartingPoint(Point2.origin())
                .setStraightLine(DL1, Vector2.xDirect())
                .addArcLine(trajectoryBigRPart1, false, dipoleCct12Angle)
                .addStraitLine(GAP1)//gap1
                .addStraitLine(QS1_LEN)//QS1_LEN
                .addStraitLine(GAP2)//GAP2
                .addStraitLine(QS2_LEN)//QS2_LEN
                .addStraitLine(GAP2)//GAP2
                .addStraitLine(QS1_LEN)//QS1_LEN
                .addStraitLine(GAP1)//gap1
                .addArcLine(trajectoryBigRPart1, false, dipoleCct12Angle)
                .addStraitLine(DL1);

    }

    private static Trajectory getTestTrajectory(double BigR, double angle, double driftLength) {
        return TrajectoryFactory.setStartingPoint(BigR, -driftLength)
                .setStraightLine(driftLength, Vector2.yDirect())
                .addArcLine(BigR, false, angle)
                .addStraitLine(driftLength);
    }

    private Cct getCct12_1() {
        Cct agCct12 = createAgCct12();
        Cct dipoleCct12 = createDipoleCct12();

        Cct cct = CctFactory.combineCct(agCct12, dipoleCct12);

        return CctFactory.positionInXYPlane(cct, Point2.create(DL1, trajectoryBigRPart1), BaseUtils.Converter.angleToRadian(-90));
    }

    private Cct getCct12_2() {
        Cct cct12_1 = getCct12_1();

        Trajectory trajectoryPart1 = getTrajectoryPart1();
        return CctFactory.symmetryInXYPlaneByLine(
                cct12_1,
                trajectoryPart1.pointAt(DL1 + CCT12_LENGTH + GAP1 + QS1_LEN + GAP2 + QS2_LEN / 2),
                trajectoryPart1.directAt(DL1 + CCT12_LENGTH + GAP1 + QS1_LEN + GAP2 + QS2_LEN / 2).rotateSelf(Math.PI / 2)
        );
    }

    private Cct getCct345_1() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        Point2 p1 = trajectoryPart2.pointAt(DL2);
        Point2 p2 = trajectoryPart2.pointAt(DL2 + CCT345_LENGTH / 2);
        Point2 p3 = trajectoryPart2.pointAt(DL2 + CCT345_LENGTH);

        Point2 center3 = Arcs.center(p1, p2, p3);

        Cct dipoleCct345 = createDipoleCct345();
        Cct agCct345 = createAgCct345();


        dipoleCct345 = CctFactory.positionInXYPlane(dipoleCct345, center3, BaseUtils.Converter.angleToRadian(180 - dipoleCct345Angle - 45));
        agCct345 = CctFactory.positionInXYPlane(agCct345, center3, BaseUtils.Converter.angleToRadian(180 - dipoleCct345Angle - 45));


        return CctFactory.combineCct(dipoleCct345, agCct345);
    }

    private Cct getCct345_2() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        Point2 p = trajectoryPart2.pointAt(DL2 + CCT345_LENGTH + GAP3 + QS3_LEN / 2);
        Vector2 d = trajectoryPart2.directAt(DL2 + CCT345_LENGTH + GAP3 + QS3_LEN / 2).rotateSelf(Math.PI / 2);

        Cct cct345_1 = getCct345_1();

        return CctFactory.symmetryInXYPlaneByLine(cct345_1, p, d);
    }

    private Elements getElementsOfAllPart1() {
        List<QsHardPlaneMagnet> qs = getQs12();
        Cct allCctIn45 = CctFactory.combineCct(getCct12_1(), getCct12_2());

        Elements elements = Elements.empty();
        qs.forEach(elements::addElement);
        allCctIn45.getSoleLayerCctList().forEach(elements::addElement);

        return elements;
    }

    private MagnetAble getElementsOfAllPart2() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        Cct cct345_1 = getCct345_1();
        Cct cct345_2 = getCct345_2();

        QsHardPlaneMagnet QS3 = getQs3();

        Elements elements = Elements.empty();

        elements.addElement(cct345_1);
        elements.addElement(cct345_2);
        elements.addElement(QS3);

        return elements;
    }

    private List<QsHardPlaneMagnet> getQs12() {
        Trajectory trajectoryPart1 = getTrajectoryPart1();

        QsHardPlaneMagnet QS11 = QsHardPlaneMagnet.create(QS1_LEN, QS1_GRADIENT, QS1_SECOND_GRADIENT, QS1_APERTURE_MM,
                trajectoryPart1.pointAt(DL1 + CCT12_LENGTH + GAP1), trajectoryPart1.directAt(DL1 + CCT12_LENGTH + GAP1));

        QsHardPlaneMagnet QS2 = QsHardPlaneMagnet.create(QS2_LEN, QS2_GRADIENT, QS2_SECOND_GRADIENT, QS2_APERTURE_MM,
                trajectoryPart1.pointAt(DL1 + CCT12_LENGTH + GAP1 + QS1_LEN + GAP2),
                trajectoryPart1.directAt(DL1 + CCT12_LENGTH + GAP1 + QS1_LEN + GAP2));


        QsHardPlaneMagnet QS12 = QsHardPlaneMagnet.create(QS1_LEN, QS1_GRADIENT, QS1_SECOND_GRADIENT, QS1_APERTURE_MM,
                trajectoryPart1.pointAt(DL1 + CCT12_LENGTH + GAP1 + QS1_LEN + GAP2 + QS2_LEN + GAP2),
                trajectoryPart1.directAt(DL1 + CCT12_LENGTH + GAP1 + QS1_LEN + GAP2 + QS2_LEN + GAP2));

        return List.of(QS11, QS2, QS12);
    }

    private QsHardPlaneMagnet getQs3() {
        Trajectory trajectoryPart2 = getTrajectoryPart2();

        return QsHardPlaneMagnet.create(QS3_LEN, QS3_GRADIENT, QS3_SECOND_GRADIENT, QS3_APERTURE_MM,
                trajectoryPart2.pointAt(DL2 + CCT345_LENGTH + GAP3),
                trajectoryPart2.directAt(DL2 + CCT345_LENGTH + GAP3));
    }

    private Cct createDipoleCct345() {
        return createDipoleCct(
                dipoleCct345SmallRInner, dipoleCct345SmallROuter, dipoleCct345BigR,
                dipoleCct345Angle, dipoleCct345WindingNumber,
                dipoleCct345A0Inner, dipoleCct345A1Inner, dipoleCct345A2Inner, dipoleCct345IInner,
                dipoleCct345A0Outer, dipoleCct345A1Outer, dipoleCct345A2Outer, dipoleCct345IOuter,
                numberPerWinding,
                dipoleCct345StartingθInner, dipoleCct345StartingθOuter,
                dipoleCct345StartingφInner, dipoleCct345StartingφOuter,
                dipoleCct345DirectθInner, dipoleCct345DirectθOuter
        );
    }

    private Cct createDipoleCct12() {
        return createDipoleCct(
                dipoleCct12SmallRInner, dipoleCct12SmallROuter, dipoleCct12BigR,
                dipoleCct12Angle, dipoleCct12WindingNumber,
                dipoleCct12A0Inner, dipoleCct12A1Inner, dipoleCct12A2Inner, dipoleCct12IInner,
                dipoleCct12A0Outer, dipoleCct12A1Outer, dipoleCct12A2Outer, dipoleCct12IOuter,
                numberPerWinding,
                dipoleCct12StartingθInner, dipoleCct12StartingθOuter,
                dipoleCct12StartingφInner, dipoleCct12StartingφOuter,
                dipoleCct12DirectθInner, dipoleCct12DirectθOuter
        );
    }

    private Cct createAgCct12() {
        return createAgCct(
                agCct12SmallRInner, agCct12SmallROuter, agCct12BigR,
                new double[]{agCctAngle1, agCctAngle2},
                new int[]{agCctWindingNumber1, agCctWindingNumber2},
                agCct12A0Inner, agCct12A1Inner, agCct12A2Inner, agCct12IInner,
                agCct12A0Outer, agCct12A1Outer, agCct12A2Outer, agCct12IOuter,
                numberPerWinding,
                agCct12StartingθInner, agCct12StartingθOuter,
                agCct12StartingφInner, agCct12StartingφOuter,
                agCct12DirectθInner, agCct12DirectθOuter
        );
    }

    private Cct createAgCct345() {
        return createAgCct(
                agCct345SmallRInner, agCct345SmallROuter, agCct345BigR,
                new double[]{agCctAngle5, agCctAngle4, agCctAngle3},
                new int[]{agCctWindingNumber5, agCctWindingNumber4, agCctWindingNumber3},
                agCct345A0Inners, agCct345A1Inners, agCct345A2Inners, agCct345IInner,
                agCct345A0Outers, agCct345A1Outers, agCct345A2Outers, agCct345IOuter,
                numberPerWinding,
                agCct345StartingθInner, agCct345StartingθOuter,
                agCct345StartingφInner, agCct345StartingφOuter,
                agCct345DirectθInner, agCct345DirectθOuter
        );
    }

    private Cct createDipoleCct(
            double smallRInner, double smallROuter, double bigR, double angle, int windingNumber,
            double a0BipolarInner, double a1QuadrupleInner, double a2SextupleInner, double IInner,
            double a0BipolarOuter, double a1QuadrupleOuter, double a2SextupleOuter, double IOuter,
            int numberPerWinding,
            double startingθInner, double startingθOuter,
            double startingφInner, double startingφOuter,
            boolean directθInner, boolean directθOuter
    ) {
        return CctFactory.createDipoleCctDetailed(
                smallRInner, smallROuter, bigR, angle, windingNumber,
                a0BipolarInner, a1QuadrupleInner, a2SextupleInner, IInner,
                a0BipolarOuter, a1QuadrupleOuter, a2SextupleOuter, IOuter,
                numberPerWinding,
                startingθInner, startingθOuter,
                startingφInner, startingφOuter,
                directθInner, directθOuter
        );
    }

    private Cct createAgCct(
            double smallRInner, double smallROuter, double bigR, double[] angles, int[] windingNumbers,
            double a0BipolarInners, double a1QuadrupleInners, double a2SextupleInners, double IInner,
            double a0BipolarOuters, double a1QuadrupleOuters, double a2SextupleOuters, double IOuter,
            int numberPerWinding,
            double startingθInner, double startingθOuter,
            double startingφInner, double startingφOuter,
            boolean directθInner, boolean directθOuter
    ) {
//        double smallRInner, double smallROuter, double bigR, double[] angles, int[] windingNumbers,
//        double a0BipolarInners, double a1QuadrupleInners, double a2SextupleInners, double IInner,
//        double a0BipolarOuters, double a1QuadrupleOuters, double a2SextupleOuters, double IOuter,
//        int numberPerWinding,
//        double startingθInner, double startingθOuter,
//        double startingφInner, double startingφOuter,
//        boolean directθInner, boolean directθOuter
        return CctFactory.createAgCct(
                smallRInner, smallROuter, bigR, angles, windingNumbers,
                a0BipolarInners, a1QuadrupleInners, a2SextupleInners, IInner,
                a0BipolarOuters, a1QuadrupleOuters, a2SextupleOuters, IOuter,
                numberPerWinding,
                startingθInner, startingθOuter,
                startingφInner, startingφOuter,
                directθInner, directθOuter
        );
    }

    private Cct createAgCct(
            double smallRInner, double smallROuter, double bigR, double[] angles, int[] windingNumbers,
            double[] a0BipolarInners, double[] a1QuadrupleInners, double[] a2SextupleInners, double IInner,
            double[] a0BipolarOuters, double[] a1QuadrupleOuters, double[] a2SextupleOuters, double IOuter,
            int numberPerWinding,
            double startingθInner, double startingθOuter,
            double startingφInner, double startingφOuter,
            boolean directθInner, boolean directθOuter
    ) {
        return CctFactory.createAgCct(
                smallRInner, smallROuter, bigR, angles, windingNumbers,
                a0BipolarInners, a1QuadrupleInners, a2SextupleInners, IInner,
                a0BipolarOuters, a1QuadrupleOuters, a2SextupleOuters, IOuter,
                numberPerWinding,
                startingθInner, startingθOuter,
                startingφInner, startingφOuter,
                directθInner, directθOuter
        );
    }


    private final BaseUtils.Timer timer = new BaseUtils.Timer();

    BaseUtils.Switcher<String> switcher = BaseUtils.Switcher.creat(
            Plot2d.RED_LINE,
            Plot2d.YELLOW_LINE,
            Plot2d.BLUE_LINE,
            Plot2d.GREEN_LINE,
            Plot2d.RED_DASH,
            Plot2d.PINK_DASH,
            Plot2d.BLUE_DASH,
            Plot2d.BLACK_DASH,
            Plot2d.BLACK_LINE
    );

    // 磁钢度
    private final double Bp = 2.43213;

    // QS 123
    private double QS1_GRADIENT = 28.33; //T m-1
    private double QS2_GRADIENT = -12.12; //T m-1
    private double QS3_GRADIENT = -11.78; //T m-1

    // 注意，六极场梯度一直存在错误，实际值应该乘二。由陈庚发现于 2020年5月26日
    private double QS1_SECOND_GRADIENT = -140.44 * 2.0 / 2.0; //T m-2
    private double QS2_SECOND_GRADIENT = 316.22 * 2.0 / 2.0; //T m-2
    private double QS3_SECOND_GRADIENT = -87.25 * 2.0 / 2.0; //T m-2

    // QS 孔径
    private double QS1_APERTURE_MM = 30;
    private double QS2_APERTURE_MM = 30;
    private double QS3_APERTURE_MM = 60;

    // 偏转半径
    private final double trajectoryBigRPart1 = 0.95;
    private final double trajectoryBigRPart2 = 0.95;
    private final double dipoleCct12BigR = 0.95;
    private final double dipoleCct345BigR = 0.95;
    private double agCct12BigR = 0.95 + 0.1875 * MM;
    private double agCct345BigR = 0.95 + 1.12 * MM;

    // 初始绕线位置
    private double dipoleCct12StartingθInner = 0.0;
    private double dipoleCct12StartingθOuter = 0.0;
    private double dipoleCct12StartingφInner = 0.0;
    private double dipoleCct12StartingφOuter = 0.0;
    private boolean dipoleCct12DirectθInner = true;
    private boolean dipoleCct12DirectθOuter = false;
    private double agCct12StartingθInner = 0.0; // 起始绕线方向
    private double agCct12StartingθOuter = 0.0;
    private double agCct12StartingφInner = 0.0;
    private double agCct12StartingφOuter = 0.0;
    private boolean agCct12DirectθInner = false;
    private boolean agCct12DirectθOuter = true;

    private double dipoleCct345StartingθInner = 0.0;
    private double dipoleCct345StartingθOuter = 0.0;
    private double dipoleCct345StartingφInner = 0.0;
    private double dipoleCct345StartingφOuter = 0.0;
    private boolean dipoleCct345DirectθInner = true;
    private boolean dipoleCct345DirectθOuter = false;
    private double agCct345StartingθInner = 0.0; // 起始绕线方向
    private double agCct345StartingθOuter = 0.0;
    private double agCct345StartingφInner = 0.0;
    private double agCct345StartingφOuter = 0.0;
    private boolean agCct345DirectθInner = false;
    private boolean agCct345DirectθOuter = true;

    // CCT孔径
    private final double agCct12SmallRInner = 23.5 * MM;
    private final double agCct12SmallROuter = 33.5 * MM;
    private final double dipoleCct12SmallRInner = 43 * MM;
    private final double dipoleCct12SmallROuter = 52 * MM;

    private double agCct345SmallRInner = 23.5 * MM + 40 * MM;
    private double agCct345SmallROuter = 33.5 * MM + 40 * MM;
    private final double dipoleCct345SmallRInner = 43 * MM + 40 * MM;
    private final double dipoleCct345SmallROuter = 52 * MM + 40 * MM;

    // CCT a0 a1 a2
    private double dipoleCct12A0Inner = -dipoleCct12SmallRInner * Math.sqrt(3) / dipoleCct12BigR; // 2020年9月4日 调整后倾斜角为30度整
    private double dipoleCct12A0Outer = dipoleCct12SmallROuter * Math.sqrt(3) / dipoleCct12BigR;
    private double dipoleCct12A1Inner = Math.pow(dipoleCct12SmallRInner, 2) * 0.25;
    private double dipoleCct12A1Outer = -Math.pow(dipoleCct12SmallROuter, 2) * 0.25;
    private double dipoleCct12A2Inner = 0.0;
    private double dipoleCct12A2Outer = 0.0;

    private final double agCct12A0Inner = 0.0;
    private final double agCct12A0Outer = 0.0;
    private final double agCct12A1Inner = -Math.pow(agCct12SmallRInner, 2) * Math.sqrt(3) * 20;
    private final double agCct12A1Outer = Math.pow(agCct12SmallROuter, 2) * Math.sqrt(3) * 20;
    private final double agCct12A2Inner = 0.0;
    private final double agCct12A2Outer = 0.0;

    private double dipoleCct345A0Inner = -dipoleCct345SmallRInner * Math.sqrt(3) / dipoleCct345BigR; // 2020年9月4日 调整后倾斜角为30度整
    private double dipoleCct345A0Outer = dipoleCct345SmallROuter * Math.sqrt(3) / dipoleCct345BigR;
    private double dipoleCct345A1Inner = Math.pow(dipoleCct345SmallRInner, 2) * 0.25;
    private double dipoleCct345A1Outer = -Math.pow(dipoleCct345SmallROuter, 2) * 0.25;
    private double dipoleCct345A2Inner = 0.0;
    private double dipoleCct345A2Outer = 0.0;

    // 数组
    private double[] agCct345A0Inners = BaseUtils.ArrayUtils.repeat(0.0, 3);
    private double[] agCct345A0Outers = BaseUtils.ArrayUtils.repeat(0.0, 3);
    private double[] agCct345A1Inners = BaseUtils.ArrayUtils.repeat(-Math.pow(agCct345SmallRInner, 2) * Math.sqrt(3) * 20 * 0.19, 3);
    private double[] agCct345A1Outers = BaseUtils.ArrayUtils.repeat(Math.pow(agCct345SmallROuter, 2) * Math.sqrt(3) * 20 * 0.19, 3);
    private double[] agCct345A2Inners = BaseUtils.ArrayUtils.repeat(0.0, 3);
    private double[] agCct345A2Outers = BaseUtils.ArrayUtils.repeat(0.0, 3);

    //
    private final int dipoleCct12WindingNumber = 71;
    private final int agCctWindingNumber1 = 30;
    private final int agCctWindingNumber2 = 39; // sum = 69

    private final int dipoleCct345WindingNumber = 201;
    private final int agCctWindingNumber3 = 29;
    private final int agCctWindingNumber4 = 64;
    private final int agCctWindingNumber5 = 65;  // sum 158

    // CCT角度
    private final double dipoleCct12Angle = 22.5;
    private final double agCctAngle1 = 22.5 * agCctWindingNumber1 / (agCctWindingNumber1 + agCctWindingNumber2);//9.782608695652174
    private final double agCctAngle2 = 22.5 * agCctWindingNumber2 / (agCctWindingNumber1 + agCctWindingNumber2);//12.717391304347826

    private final double dipoleCct345Angle = 67.5;
    private final double agCctAngle3 = 67.5 * agCctWindingNumber3 / (agCctWindingNumber3 + agCctWindingNumber4 + agCctWindingNumber5); //12.389
    private final double agCctAngle4 = 67.5 * agCctWindingNumber4 / (agCctWindingNumber3 + agCctWindingNumber4 + agCctWindingNumber5); //27.3418
    private final double agCctAngle5 = 67.5 * agCctWindingNumber5 / (agCctWindingNumber3 + agCctWindingNumber4 + agCctWindingNumber5); //27.7690

    // 长度
    private final double DL1 = 0.825;
    private final double DL2 = 2.000;
    private final double QS1_LEN = 0.250;
    private final double QS2_LEN = 0.250;
    private final double QS3_LEN = 0.163;
    private final double GAP1 = 0.200;
    private final double GAP2 = 0.200;
    private final double GAP3 = 0.176;
    private final double BETWEEN_CCT225 = GAP1 * 2 + QS1_LEN * 2 + GAP2 * 2 + QS2_LEN;
    private final double CCT12_LENGTH = trajectoryBigRPart1 * BaseUtils.Converter.angleToRadian(dipoleCct12Angle);
    private final double CCT12_LENGTH_PART1 = trajectoryBigRPart1 * BaseUtils.Converter.angleToRadian(agCctAngle1);
    private final double CCT12_LENGTH_PART2 = trajectoryBigRPart1 * BaseUtils.Converter.angleToRadian(agCctAngle2);
    private final double CCT345_LENGTH = trajectoryBigRPart2 * BaseUtils.Converter.angleToRadian(dipoleCct345Angle);
    private final double CCT345_LENGTH_PART3 = trajectoryBigRPart2 * BaseUtils.Converter.angleToRadian(agCctAngle3);
    private final double CCT345_LENGTH_PART4 = trajectoryBigRPart2 * BaseUtils.Converter.angleToRadian(agCctAngle4);
    private final double CCT345_LENGTH_PART5 = trajectoryBigRPart2 * BaseUtils.Converter.angleToRadian(agCctAngle5);

    // 电流
    private double dipoleCct12IInner = 6191.87824; // 求解获得 2020年9月5日
    private double dipoleCct12IOuter = dipoleCct12IInner;
    private double agCct12IInner = -3319.43418579895;// 观察图像活得 2020年9月5日
    private double agCct12IOuter = agCct12IInner;

    private double dipoleCct345IInner = -6529.971375582991; // 2020年9月9日 -6738.987300872428 。2020年9月11日 改为 -6529.971375582991
    private double dipoleCct345IOuter = dipoleCct345IInner;
    private double agCct345IInner = 8171; // 9799 // 2020年6月11日 *0.995 = 7811. 2020年9月11日 改为 8171
    private double agCct345IOuter = agCct345IInner;

    // CCT每匝分段
    private final int numberPerWinding = 360;

    public static void main(String[] args) throws Exception {
        BaseUtils.Timer.printPeriodPerSecondCall(Logger.getLogger());
        StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[1];
        Logger.getLogger().info("{}", stackTraceElement.getClassName());
        Class<?> currentClass = Class.forName(stackTraceElement.getClassName());

        Constructor<?> constructor = currentClass.getConstructor();
        Object newInstance = constructor.newInstance();

        Class<Run> runAnnotation = Run.class;

        Method[] methods = currentClass.getMethods();
        Arrays.stream(methods)
                .filter(method -> method.isAnnotationPresent(runAnnotation))
                .filter(method -> method.getAnnotation(runAnnotation).validate())
                .sorted((m1, m2) -> Integer.compare(
                        m2.getAnnotation(runAnnotation).value(),
                        m1.getAnnotation(runAnnotation).value()
                ))
                .limit(1)
                .forEach(method -> {
                    Logger.getLogger().info("运行{}", method.toString());
                    try {
                        method.invoke(newInstance);
                    } catch (IllegalAccessException | InvocationTargetException e) {
                        e.printStackTrace();
                    }
                });

        BaseUtils.Timer.printPeriodPerSecondCall(Logger.getLogger());
    }


}
